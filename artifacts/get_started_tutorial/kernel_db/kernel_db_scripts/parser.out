Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    FLOAT
    STRING
    CHAR
    WS
    COMMENT1
    COMMENT2
    POUND
    DPOUND
    ELSE
    IF

Grammar

Rule 0     S' -> function
Rule 1     function -> signature { shared_buffer statements }
Rule 2     signature -> GLOBAL VOID ID ( parameters )
Rule 3     parameters -> parameter
Rule 4     parameters -> parameters , parameter
Rule 5     parameter -> type ID
Rule 6     parameter -> type QUALIFIER ID
Rule 7     parameter -> QUALIFIER type ID
Rule 8     type -> TYPE
Rule 9     type -> TYPE *
Rule 10    shared_buffer -> shared
Rule 11    shared_buffer -> shared_buffer shared
Rule 12    shared_buffer -> normal
Rule 13    shared -> SHARED TYPE ID [ INTEGER ] ;
Rule 14    statements -> statement
Rule 15    statements -> statements statement
Rule 16    statement -> sync
Rule 17    statement -> for_loop_static
Rule 18    statement -> normal
Rule 19    for_loop_static -> FOR ( assign compare increase ) { statements }
Rule 20    assign -> TYPE ID = INTEGER ;
Rule 21    compare -> ID < INTEGER ;
Rule 22    increase -> + + ID
Rule 23    increase -> ID + +
Rule 24    sync -> SYNC ( ) ;
Rule 25    normal -> ;
Rule 26    normal -> { normal }

Terminals, with rules where they appear

(                    : 2 19 24
)                    : 2 19 24
*                    : 9
+                    : 22 22 23 23
,                    : 4
;                    : 13 20 21 24 25
<                    : 21
=                    : 20
CHAR                 : 
COMMENT1             : 
COMMENT2             : 
DPOUND               : 
ELSE                 : 
FLOAT                : 
FOR                  : 19
GLOBAL               : 2
ID                   : 2 5 6 7 13 20 21 22 23
IF                   : 
INTEGER              : 13 20 21
POUND                : 
QUALIFIER            : 6 7
SHARED               : 13
STRING               : 
SYNC                 : 24
TYPE                 : 8 9 13 20
VOID                 : 2
WS                   : 
[                    : 13
]                    : 13
error                : 
{                    : 1 19 26
}                    : 1 19 26

Nonterminals, with rules where they appear

assign               : 19
compare              : 19
for_loop_static      : 17
function             : 0
increase             : 19
normal               : 12 18 26
parameter            : 3 4
parameters           : 2 4
shared               : 10 11
shared_buffer        : 1 11
signature            : 1
statement            : 14 15
statements           : 1 15 19
sync                 : 16
type                 : 5 6 7

Parsing method: LALR

state 0

    (0) S' -> . function
    (1) function -> . signature { shared_buffer statements }
    (2) signature -> . GLOBAL VOID ID ( parameters )

    GLOBAL          shift and go to state 3

    function                       shift and go to state 1
    signature                      shift and go to state 2

state 1

    (0) S' -> function .



state 2

    (1) function -> signature . { shared_buffer statements }

    {               shift and go to state 4


state 3

    (2) signature -> GLOBAL . VOID ID ( parameters )

    VOID            shift and go to state 5


state 4

    (1) function -> signature { . shared_buffer statements }
    (10) shared_buffer -> . shared
    (11) shared_buffer -> . shared_buffer shared
    (12) shared_buffer -> . normal
    (13) shared -> . SHARED TYPE ID [ INTEGER ] ;
    (25) normal -> . ;
    (26) normal -> . { normal }

    SHARED          shift and go to state 10
    ;               shift and go to state 11
    {               shift and go to state 6

    shared_buffer                  shift and go to state 7
    shared                         shift and go to state 8
    normal                         shift and go to state 9

state 5

    (2) signature -> GLOBAL VOID . ID ( parameters )

    ID              shift and go to state 12


state 6

    (26) normal -> { . normal }
    (25) normal -> . ;
    (26) normal -> . { normal }

    ;               shift and go to state 11
    {               shift and go to state 6

    normal                         shift and go to state 13

state 7

    (1) function -> signature { shared_buffer . statements }
    (11) shared_buffer -> shared_buffer . shared
    (14) statements -> . statement
    (15) statements -> . statements statement
    (13) shared -> . SHARED TYPE ID [ INTEGER ] ;
    (16) statement -> . sync
    (17) statement -> . for_loop_static
    (18) statement -> . normal
    (24) sync -> . SYNC ( ) ;
    (19) for_loop_static -> . FOR ( assign compare increase ) { statements }
    (25) normal -> . ;
    (26) normal -> . { normal }

    SHARED          shift and go to state 10
    SYNC            shift and go to state 20
    FOR             shift and go to state 21
    ;               shift and go to state 11
    {               shift and go to state 6

    statements                     shift and go to state 14
    shared                         shift and go to state 15
    statement                      shift and go to state 16
    sync                           shift and go to state 17
    for_loop_static                shift and go to state 18
    normal                         shift and go to state 19

state 8

    (10) shared_buffer -> shared .

    SHARED          reduce using rule 10 (shared_buffer -> shared .)
    SYNC            reduce using rule 10 (shared_buffer -> shared .)
    FOR             reduce using rule 10 (shared_buffer -> shared .)
    ;               reduce using rule 10 (shared_buffer -> shared .)
    {               reduce using rule 10 (shared_buffer -> shared .)


state 9

    (12) shared_buffer -> normal .

    SHARED          reduce using rule 12 (shared_buffer -> normal .)
    SYNC            reduce using rule 12 (shared_buffer -> normal .)
    FOR             reduce using rule 12 (shared_buffer -> normal .)
    ;               reduce using rule 12 (shared_buffer -> normal .)
    {               reduce using rule 12 (shared_buffer -> normal .)


state 10

    (13) shared -> SHARED . TYPE ID [ INTEGER ] ;

    TYPE            shift and go to state 22


state 11

    (25) normal -> ; .

    SHARED          reduce using rule 25 (normal -> ; .)
    SYNC            reduce using rule 25 (normal -> ; .)
    FOR             reduce using rule 25 (normal -> ; .)
    ;               reduce using rule 25 (normal -> ; .)
    {               reduce using rule 25 (normal -> ; .)
    }               reduce using rule 25 (normal -> ; .)


state 12

    (2) signature -> GLOBAL VOID ID . ( parameters )

    (               shift and go to state 23


state 13

    (26) normal -> { normal . }

    }               shift and go to state 24


state 14

    (1) function -> signature { shared_buffer statements . }
    (15) statements -> statements . statement
    (16) statement -> . sync
    (17) statement -> . for_loop_static
    (18) statement -> . normal
    (24) sync -> . SYNC ( ) ;
    (19) for_loop_static -> . FOR ( assign compare increase ) { statements }
    (25) normal -> . ;
    (26) normal -> . { normal }

    }               shift and go to state 25
    SYNC            shift and go to state 20
    FOR             shift and go to state 21
    ;               shift and go to state 11
    {               shift and go to state 6

    statement                      shift and go to state 26
    sync                           shift and go to state 17
    for_loop_static                shift and go to state 18
    normal                         shift and go to state 19

state 15

    (11) shared_buffer -> shared_buffer shared .

    SHARED          reduce using rule 11 (shared_buffer -> shared_buffer shared .)
    SYNC            reduce using rule 11 (shared_buffer -> shared_buffer shared .)
    FOR             reduce using rule 11 (shared_buffer -> shared_buffer shared .)
    ;               reduce using rule 11 (shared_buffer -> shared_buffer shared .)
    {               reduce using rule 11 (shared_buffer -> shared_buffer shared .)


state 16

    (14) statements -> statement .

    }               reduce using rule 14 (statements -> statement .)
    SYNC            reduce using rule 14 (statements -> statement .)
    FOR             reduce using rule 14 (statements -> statement .)
    ;               reduce using rule 14 (statements -> statement .)
    {               reduce using rule 14 (statements -> statement .)


state 17

    (16) statement -> sync .

    }               reduce using rule 16 (statement -> sync .)
    SYNC            reduce using rule 16 (statement -> sync .)
    FOR             reduce using rule 16 (statement -> sync .)
    ;               reduce using rule 16 (statement -> sync .)
    {               reduce using rule 16 (statement -> sync .)


state 18

    (17) statement -> for_loop_static .

    }               reduce using rule 17 (statement -> for_loop_static .)
    SYNC            reduce using rule 17 (statement -> for_loop_static .)
    FOR             reduce using rule 17 (statement -> for_loop_static .)
    ;               reduce using rule 17 (statement -> for_loop_static .)
    {               reduce using rule 17 (statement -> for_loop_static .)


state 19

    (18) statement -> normal .

    }               reduce using rule 18 (statement -> normal .)
    SYNC            reduce using rule 18 (statement -> normal .)
    FOR             reduce using rule 18 (statement -> normal .)
    ;               reduce using rule 18 (statement -> normal .)
    {               reduce using rule 18 (statement -> normal .)


state 20

    (24) sync -> SYNC . ( ) ;

    (               shift and go to state 27


state 21

    (19) for_loop_static -> FOR . ( assign compare increase ) { statements }

    (               shift and go to state 28


state 22

    (13) shared -> SHARED TYPE . ID [ INTEGER ] ;

    ID              shift and go to state 29


state 23

    (2) signature -> GLOBAL VOID ID ( . parameters )
    (3) parameters -> . parameter
    (4) parameters -> . parameters , parameter
    (5) parameter -> . type ID
    (6) parameter -> . type QUALIFIER ID
    (7) parameter -> . QUALIFIER type ID
    (8) type -> . TYPE
    (9) type -> . TYPE *

    QUALIFIER       shift and go to state 33
    TYPE            shift and go to state 34

    parameters                     shift and go to state 30
    parameter                      shift and go to state 31
    type                           shift and go to state 32

state 24

    (26) normal -> { normal } .

    SHARED          reduce using rule 26 (normal -> { normal } .)
    SYNC            reduce using rule 26 (normal -> { normal } .)
    FOR             reduce using rule 26 (normal -> { normal } .)
    ;               reduce using rule 26 (normal -> { normal } .)
    {               reduce using rule 26 (normal -> { normal } .)
    }               reduce using rule 26 (normal -> { normal } .)


state 25

    (1) function -> signature { shared_buffer statements } .

    $end            reduce using rule 1 (function -> signature { shared_buffer statements } .)


state 26

    (15) statements -> statements statement .

    }               reduce using rule 15 (statements -> statements statement .)
    SYNC            reduce using rule 15 (statements -> statements statement .)
    FOR             reduce using rule 15 (statements -> statements statement .)
    ;               reduce using rule 15 (statements -> statements statement .)
    {               reduce using rule 15 (statements -> statements statement .)


state 27

    (24) sync -> SYNC ( . ) ;

    )               shift and go to state 35


state 28

    (19) for_loop_static -> FOR ( . assign compare increase ) { statements }
    (20) assign -> . TYPE ID = INTEGER ;

    TYPE            shift and go to state 37

    assign                         shift and go to state 36

state 29

    (13) shared -> SHARED TYPE ID . [ INTEGER ] ;

    [               shift and go to state 38


state 30

    (2) signature -> GLOBAL VOID ID ( parameters . )
    (4) parameters -> parameters . , parameter

    )               shift and go to state 39
    ,               shift and go to state 40


state 31

    (3) parameters -> parameter .

    )               reduce using rule 3 (parameters -> parameter .)
    ,               reduce using rule 3 (parameters -> parameter .)


state 32

    (5) parameter -> type . ID
    (6) parameter -> type . QUALIFIER ID

    ID              shift and go to state 41
    QUALIFIER       shift and go to state 42


state 33

    (7) parameter -> QUALIFIER . type ID
    (8) type -> . TYPE
    (9) type -> . TYPE *

    TYPE            shift and go to state 34

    type                           shift and go to state 43

state 34

    (8) type -> TYPE .
    (9) type -> TYPE . *

    ID              reduce using rule 8 (type -> TYPE .)
    QUALIFIER       reduce using rule 8 (type -> TYPE .)
    *               shift and go to state 44


state 35

    (24) sync -> SYNC ( ) . ;

    ;               shift and go to state 45


state 36

    (19) for_loop_static -> FOR ( assign . compare increase ) { statements }
    (21) compare -> . ID < INTEGER ;

    ID              shift and go to state 47

    compare                        shift and go to state 46

state 37

    (20) assign -> TYPE . ID = INTEGER ;

    ID              shift and go to state 48


state 38

    (13) shared -> SHARED TYPE ID [ . INTEGER ] ;

    INTEGER         shift and go to state 49


state 39

    (2) signature -> GLOBAL VOID ID ( parameters ) .

    {               reduce using rule 2 (signature -> GLOBAL VOID ID ( parameters ) .)


state 40

    (4) parameters -> parameters , . parameter
    (5) parameter -> . type ID
    (6) parameter -> . type QUALIFIER ID
    (7) parameter -> . QUALIFIER type ID
    (8) type -> . TYPE
    (9) type -> . TYPE *

    QUALIFIER       shift and go to state 33
    TYPE            shift and go to state 34

    parameter                      shift and go to state 50
    type                           shift and go to state 32

state 41

    (5) parameter -> type ID .

    )               reduce using rule 5 (parameter -> type ID .)
    ,               reduce using rule 5 (parameter -> type ID .)


state 42

    (6) parameter -> type QUALIFIER . ID

    ID              shift and go to state 51


state 43

    (7) parameter -> QUALIFIER type . ID

    ID              shift and go to state 52


state 44

    (9) type -> TYPE * .

    ID              reduce using rule 9 (type -> TYPE * .)
    QUALIFIER       reduce using rule 9 (type -> TYPE * .)


state 45

    (24) sync -> SYNC ( ) ; .

    }               reduce using rule 24 (sync -> SYNC ( ) ; .)
    SYNC            reduce using rule 24 (sync -> SYNC ( ) ; .)
    FOR             reduce using rule 24 (sync -> SYNC ( ) ; .)
    ;               reduce using rule 24 (sync -> SYNC ( ) ; .)
    {               reduce using rule 24 (sync -> SYNC ( ) ; .)


state 46

    (19) for_loop_static -> FOR ( assign compare . increase ) { statements }
    (22) increase -> . + + ID
    (23) increase -> . ID + +

    +               shift and go to state 54
    ID              shift and go to state 55

    increase                       shift and go to state 53

state 47

    (21) compare -> ID . < INTEGER ;

    <               shift and go to state 56


state 48

    (20) assign -> TYPE ID . = INTEGER ;

    =               shift and go to state 57


state 49

    (13) shared -> SHARED TYPE ID [ INTEGER . ] ;

    ]               shift and go to state 58


state 50

    (4) parameters -> parameters , parameter .

    )               reduce using rule 4 (parameters -> parameters , parameter .)
    ,               reduce using rule 4 (parameters -> parameters , parameter .)


state 51

    (6) parameter -> type QUALIFIER ID .

    )               reduce using rule 6 (parameter -> type QUALIFIER ID .)
    ,               reduce using rule 6 (parameter -> type QUALIFIER ID .)


state 52

    (7) parameter -> QUALIFIER type ID .

    )               reduce using rule 7 (parameter -> QUALIFIER type ID .)
    ,               reduce using rule 7 (parameter -> QUALIFIER type ID .)


state 53

    (19) for_loop_static -> FOR ( assign compare increase . ) { statements }

    )               shift and go to state 59


state 54

    (22) increase -> + . + ID

    +               shift and go to state 60


state 55

    (23) increase -> ID . + +

    +               shift and go to state 61


state 56

    (21) compare -> ID < . INTEGER ;

    INTEGER         shift and go to state 62


state 57

    (20) assign -> TYPE ID = . INTEGER ;

    INTEGER         shift and go to state 63


state 58

    (13) shared -> SHARED TYPE ID [ INTEGER ] . ;

    ;               shift and go to state 64


state 59

    (19) for_loop_static -> FOR ( assign compare increase ) . { statements }

    {               shift and go to state 65


state 60

    (22) increase -> + + . ID

    ID              shift and go to state 66


state 61

    (23) increase -> ID + . +

    +               shift and go to state 67


state 62

    (21) compare -> ID < INTEGER . ;

    ;               shift and go to state 68


state 63

    (20) assign -> TYPE ID = INTEGER . ;

    ;               shift and go to state 69


state 64

    (13) shared -> SHARED TYPE ID [ INTEGER ] ; .

    SHARED          reduce using rule 13 (shared -> SHARED TYPE ID [ INTEGER ] ; .)
    SYNC            reduce using rule 13 (shared -> SHARED TYPE ID [ INTEGER ] ; .)
    FOR             reduce using rule 13 (shared -> SHARED TYPE ID [ INTEGER ] ; .)
    ;               reduce using rule 13 (shared -> SHARED TYPE ID [ INTEGER ] ; .)
    {               reduce using rule 13 (shared -> SHARED TYPE ID [ INTEGER ] ; .)


state 65

    (19) for_loop_static -> FOR ( assign compare increase ) { . statements }
    (14) statements -> . statement
    (15) statements -> . statements statement
    (16) statement -> . sync
    (17) statement -> . for_loop_static
    (18) statement -> . normal
    (24) sync -> . SYNC ( ) ;
    (19) for_loop_static -> . FOR ( assign compare increase ) { statements }
    (25) normal -> . ;
    (26) normal -> . { normal }

    SYNC            shift and go to state 20
    FOR             shift and go to state 21
    ;               shift and go to state 11
    {               shift and go to state 6

    statements                     shift and go to state 70
    statement                      shift and go to state 16
    sync                           shift and go to state 17
    for_loop_static                shift and go to state 18
    normal                         shift and go to state 19

state 66

    (22) increase -> + + ID .

    )               reduce using rule 22 (increase -> + + ID .)


state 67

    (23) increase -> ID + + .

    )               reduce using rule 23 (increase -> ID + + .)


state 68

    (21) compare -> ID < INTEGER ; .

    +               reduce using rule 21 (compare -> ID < INTEGER ; .)
    ID              reduce using rule 21 (compare -> ID < INTEGER ; .)


state 69

    (20) assign -> TYPE ID = INTEGER ; .

    ID              reduce using rule 20 (assign -> TYPE ID = INTEGER ; .)


state 70

    (19) for_loop_static -> FOR ( assign compare increase ) { statements . }
    (15) statements -> statements . statement
    (16) statement -> . sync
    (17) statement -> . for_loop_static
    (18) statement -> . normal
    (24) sync -> . SYNC ( ) ;
    (19) for_loop_static -> . FOR ( assign compare increase ) { statements }
    (25) normal -> . ;
    (26) normal -> . { normal }

    }               shift and go to state 71
    SYNC            shift and go to state 20
    FOR             shift and go to state 21
    ;               shift and go to state 11
    {               shift and go to state 6

    statement                      shift and go to state 26
    sync                           shift and go to state 17
    for_loop_static                shift and go to state 18
    normal                         shift and go to state 19

state 71

    (19) for_loop_static -> FOR ( assign compare increase ) { statements } .

    }               reduce using rule 19 (for_loop_static -> FOR ( assign compare increase ) { statements } .)
    SYNC            reduce using rule 19 (for_loop_static -> FOR ( assign compare increase ) { statements } .)
    FOR             reduce using rule 19 (for_loop_static -> FOR ( assign compare increase ) { statements } .)
    ;               reduce using rule 19 (for_loop_static -> FOR ( assign compare increase ) { statements } .)
    {               reduce using rule 19 (for_loop_static -> FOR ( assign compare increase ) { statements } .)

