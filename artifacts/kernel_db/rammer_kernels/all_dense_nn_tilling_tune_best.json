[{"tvm_func_name": "tuned_dot_nn_op_float_m4_k256_n256_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [4, 256], "arg1_shape": [256, 256], "out_shape": [4, 256], "transpose_A": false, "transpose_B": false}, "code": "extern \"C\" __global__ void tuned_dot_nn_op_float_m4_k256_n256_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ C) {\n   float C_local[1];\n  __shared__ float A_shared[1024];\n  __shared__ float B_shared[1024];\n   float A_shared_local[64];\n   float B_shared_local[64];\n   float A_shared_local1[64];\n   float B_shared_local1[64];\n  C_local[0] = 0.000000e+00f;\n  for (int ax0_ax1_fused_inner_inner_outer = 0; ax0_ax1_fused_inner_inner_outer < 8; ++ax0_ax1_fused_inner_inner_outer) {\n    ((__shared__ float4*)(A_shared + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 32)) + (ax0_ax1_fused_inner_inner_outer * 4))))[0] = (( float4*)(A + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 32)) + (ax0_ax1_fused_inner_inner_outer * 4))))[0];\n  }\n  for (int ax0_ax1_fused_inner_inner_outer1 = 0; ax0_ax1_fused_inner_inner_outer1 < 8; ++ax0_ax1_fused_inner_inner_outer1) {\n    ((__shared__ float4*)(B_shared + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 32)) + (ax0_ax1_fused_inner_inner_outer1 * 4))))[0] = (( float4*)(B + ((((((int)threadIdx.y) * 8192) + (((int)threadIdx.x) * 2048)) + (ax0_ax1_fused_inner_inner_outer1 * 256)) + (((int)blockIdx.x) * 4))))[0];\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 1; ++k_outer_outer) {\n    __syncthreads();\n    for (int ax0_ax1_fused_inner_inner_outer2 = 0; ax0_ax1_fused_inner_inner_outer2 < 8; ++ax0_ax1_fused_inner_inner_outer2) {\n      ((__shared__ float4*)(A_shared + ((((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 32)) + (ax0_ax1_fused_inner_inner_outer2 * 4)) + 512)))[0] = (( float4*)(A + ((((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 32)) + (ax0_ax1_fused_inner_inner_outer2 * 4)) + 128)))[0];\n    }\n    for (int ax0_ax1_fused_inner_inner_outer3 = 0; ax0_ax1_fused_inner_inner_outer3 < 8; ++ax0_ax1_fused_inner_inner_outer3) {\n      ((__shared__ float4*)(B_shared + ((((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 32)) + (ax0_ax1_fused_inner_inner_outer3 * 4)) + 512)))[0] = (( float4*)(B + (((((((int)threadIdx.y) * 8192) + (((int)threadIdx.x) * 2048)) + (ax0_ax1_fused_inner_inner_outer3 * 256)) + (((int)blockIdx.x) * 4)) + 32768)))[0];\n    }\n    for (int ax1 = 0; ax1 < 32; ++ax1) {\n      A_shared_local[ax1] = A_shared[((((int)threadIdx.y) * 128) + ax1)];\n    }\n    for (int ax0 = 0; ax0 < 32; ++ax0) {\n      B_shared_local[ax0] = B_shared[((ax0 * 4) + ((int)threadIdx.x))];\n    }\n    for (int ax11 = 0; ax11 < 32; ++ax11) {\n      A_shared_local[(ax11 + 32)] = A_shared[(((((int)threadIdx.y) * 128) + ax11) + 32)];\n    }\n    for (int ax01 = 0; ax01 < 32; ++ax01) {\n      B_shared_local[(ax01 + 32)] = B_shared[(((ax01 * 4) + ((int)threadIdx.x)) + 128)];\n    }\n    for (int k_inner_inner = 0; k_inner_inner < 32; ++k_inner_inner) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner] * B_shared_local[k_inner_inner]));\n    }\n    for (int ax12 = 0; ax12 < 32; ++ax12) {\n      A_shared_local[ax12] = A_shared[(((((int)threadIdx.y) * 128) + ax12) + 64)];\n    }\n    for (int ax02 = 0; ax02 < 32; ++ax02) {\n      B_shared_local[ax02] = B_shared[(((ax02 * 4) + ((int)threadIdx.x)) + 256)];\n    }\n    for (int k_inner_inner1 = 0; k_inner_inner1 < 32; ++k_inner_inner1) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner1 + 32)] * B_shared_local[(k_inner_inner1 + 32)]));\n    }\n    for (int ax13 = 0; ax13 < 32; ++ax13) {\n      A_shared_local[(ax13 + 32)] = A_shared[(((((int)threadIdx.y) * 128) + ax13) + 96)];\n    }\n    for (int ax03 = 0; ax03 < 32; ++ax03) {\n      B_shared_local[(ax03 + 32)] = B_shared[(((ax03 * 4) + ((int)threadIdx.x)) + 384)];\n    }\n    for (int k_inner_inner2 = 0; k_inner_inner2 < 32; ++k_inner_inner2) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner2] * B_shared_local[k_inner_inner2]));\n    }\n    for (int k_inner_inner3 = 0; k_inner_inner3 < 32; ++k_inner_inner3) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner3 + 32)] * B_shared_local[(k_inner_inner3 + 32)]));\n    }\n  }\n  __syncthreads();\n  for (int ax14 = 0; ax14 < 32; ++ax14) {\n    A_shared_local1[ax14] = A_shared[(((((int)threadIdx.y) * 128) + ax14) + 512)];\n  }\n  for (int ax04 = 0; ax04 < 32; ++ax04) {\n    B_shared_local1[ax04] = B_shared[(((ax04 * 4) + ((int)threadIdx.x)) + 512)];\n  }\n  for (int ax15 = 0; ax15 < 32; ++ax15) {\n    A_shared_local1[(ax15 + 32)] = A_shared[(((((int)threadIdx.y) * 128) + ax15) + 544)];\n  }\n  for (int ax05 = 0; ax05 < 32; ++ax05) {\n    B_shared_local1[(ax05 + 32)] = B_shared[(((ax05 * 4) + ((int)threadIdx.x)) + 640)];\n  }\n  for (int k_inner_inner4 = 0; k_inner_inner4 < 32; ++k_inner_inner4) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner4] * B_shared_local1[k_inner_inner4]));\n  }\n  for (int ax16 = 0; ax16 < 32; ++ax16) {\n    A_shared_local1[ax16] = A_shared[(((((int)threadIdx.y) * 128) + ax16) + 576)];\n  }\n  for (int ax06 = 0; ax06 < 32; ++ax06) {\n    B_shared_local1[ax06] = B_shared[(((ax06 * 4) + ((int)threadIdx.x)) + 768)];\n  }\n  for (int k_inner_inner5 = 0; k_inner_inner5 < 32; ++k_inner_inner5) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner5 + 32)] * B_shared_local1[(k_inner_inner5 + 32)]));\n  }\n  for (int ax17 = 0; ax17 < 32; ++ax17) {\n    A_shared_local1[(ax17 + 32)] = A_shared[(((((int)threadIdx.y) * 128) + ax17) + 608)];\n  }\n  for (int ax07 = 0; ax07 < 32; ++ax07) {\n    B_shared_local1[(ax07 + 32)] = B_shared[(((ax07 * 4) + ((int)threadIdx.x)) + 896)];\n  }\n  for (int k_inner_inner6 = 0; k_inner_inner6 < 32; ++k_inner_inner6) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner6] * B_shared_local1[k_inner_inner6]));\n  }\n  for (int k_inner_inner7 = 0; k_inner_inner7 < 32; ++k_inner_inner7) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner7 + 32)] * B_shared_local1[(k_inner_inner7 + 32)]));\n  }\n  C[(((((int)threadIdx.y) * 256) + (((int)blockIdx.x) * 4)) + ((int)threadIdx.x))] = C_local[0];\n}\n\n", "gridDim": [64, 1, 1], "blockDim": [4, 4, 1]}, {"tvm_func_name": "tuned_dot_nn_op_float_m4_k256_n512_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [4, 256], "arg1_shape": [256, 512], "out_shape": [4, 512], "transpose_A": false, "transpose_B": false}, "code": "extern \"C\" __global__ void tuned_dot_nn_op_float_m4_k256_n512_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ C) {\n   float C_local[1];\n  __shared__ float A_shared[256];\n  __shared__ float B_shared[256];\n   float A_shared_local[4];\n   float B_shared_local[4];\n   float A_shared_local1[4];\n   float B_shared_local1[4];\n  C_local[0] = 0.000000e+00f;\n  for (int ax0_ax1_fused_inner_inner_outer = 0; ax0_ax1_fused_inner_inner_outer < 2; ++ax0_ax1_fused_inner_inner_outer) {\n    ((__shared__ float4*)(A_shared + (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer * 4))))[0] = (( float4*)(A + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer * 4))))[0];\n  }\n  for (int ax0_ax1_fused_inner_inner_outer1 = 0; ax0_ax1_fused_inner_inner_outer1 < 2; ++ax0_ax1_fused_inner_inner_outer1) {\n    ((__shared__ float4*)(B_shared + (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer1 * 4))))[0] = (( float4*)(B + ((((((int)threadIdx.y) * 4096) + (((int)threadIdx.x) * 1024)) + (ax0_ax1_fused_inner_inner_outer1 * 512)) + (((int)blockIdx.x) * 4))))[0];\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 7; ++k_outer_outer) {\n    __syncthreads();\n    for (int ax0_ax1_fused_inner_inner_outer2 = 0; ax0_ax1_fused_inner_inner_outer2 < 2; ++ax0_ax1_fused_inner_inner_outer2) {\n      ((__shared__ float4*)(A_shared + ((((((k_outer_outer + 1) & 1) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer2 * 4))))[0] = (( float4*)(A + (((((((int)threadIdx.y) * 256) + (k_outer_outer * 32)) + (((int)threadIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer2 * 4)) + 32)))[0];\n    }\n    for (int ax0_ax1_fused_inner_inner_outer3 = 0; ax0_ax1_fused_inner_inner_outer3 < 2; ++ax0_ax1_fused_inner_inner_outer3) {\n      ((__shared__ float4*)(B_shared + ((((((k_outer_outer + 1) & 1) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer3 * 4))))[0] = (( float4*)(B + ((((((k_outer_outer * 16384) + (((int)threadIdx.y) * 4096)) + (((int)threadIdx.x) * 1024)) + (ax0_ax1_fused_inner_inner_outer3 * 512)) + (((int)blockIdx.x) * 4)) + 16384)))[0];\n    }\n    for (int ax1 = 0; ax1 < 2; ++ax1) {\n      A_shared_local[ax1] = A_shared[((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax1)];\n    }\n    for (int ax0 = 0; ax0 < 2; ++ax0) {\n      B_shared_local[ax0] = B_shared[((((k_outer_outer & 1) * 128) + (ax0 * 4)) + ((int)threadIdx.x))];\n    }\n    for (int ax11 = 0; ax11 < 2; ++ax11) {\n      A_shared_local[(ax11 + 2)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax11) + 2)];\n    }\n    for (int ax01 = 0; ax01 < 2; ++ax01) {\n      B_shared_local[(ax01 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (ax01 * 4)) + ((int)threadIdx.x)) + 8)];\n    }\n    for (int k_inner_inner = 0; k_inner_inner < 2; ++k_inner_inner) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner] * B_shared_local[k_inner_inner]));\n    }\n    for (int ax12 = 0; ax12 < 2; ++ax12) {\n      A_shared_local[ax12] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax12) + 4)];\n    }\n    for (int ax02 = 0; ax02 < 2; ++ax02) {\n      B_shared_local[ax02] = B_shared[(((((k_outer_outer & 1) * 128) + (ax02 * 4)) + ((int)threadIdx.x)) + 16)];\n    }\n    for (int k_inner_inner1 = 0; k_inner_inner1 < 2; ++k_inner_inner1) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner1 + 2)] * B_shared_local[(k_inner_inner1 + 2)]));\n    }\n    for (int ax13 = 0; ax13 < 2; ++ax13) {\n      A_shared_local[(ax13 + 2)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax13) + 6)];\n    }\n    for (int ax03 = 0; ax03 < 2; ++ax03) {\n      B_shared_local[(ax03 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (ax03 * 4)) + ((int)threadIdx.x)) + 24)];\n    }\n    for (int k_inner_inner2 = 0; k_inner_inner2 < 2; ++k_inner_inner2) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner2] * B_shared_local[k_inner_inner2]));\n    }\n    for (int ax14 = 0; ax14 < 2; ++ax14) {\n      A_shared_local[ax14] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax14) + 8)];\n    }\n    for (int ax04 = 0; ax04 < 2; ++ax04) {\n      B_shared_local[ax04] = B_shared[(((((k_outer_outer & 1) * 128) + (ax04 * 4)) + ((int)threadIdx.x)) + 32)];\n    }\n    for (int k_inner_inner3 = 0; k_inner_inner3 < 2; ++k_inner_inner3) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner3 + 2)] * B_shared_local[(k_inner_inner3 + 2)]));\n    }\n    for (int ax15 = 0; ax15 < 2; ++ax15) {\n      A_shared_local[(ax15 + 2)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax15) + 10)];\n    }\n    for (int ax05 = 0; ax05 < 2; ++ax05) {\n      B_shared_local[(ax05 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (ax05 * 4)) + ((int)threadIdx.x)) + 40)];\n    }\n    for (int k_inner_inner4 = 0; k_inner_inner4 < 2; ++k_inner_inner4) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner4] * B_shared_local[k_inner_inner4]));\n    }\n    for (int ax16 = 0; ax16 < 2; ++ax16) {\n      A_shared_local[ax16] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax16) + 12)];\n    }\n    for (int ax06 = 0; ax06 < 2; ++ax06) {\n      B_shared_local[ax06] = B_shared[(((((k_outer_outer & 1) * 128) + (ax06 * 4)) + ((int)threadIdx.x)) + 48)];\n    }\n    for (int k_inner_inner5 = 0; k_inner_inner5 < 2; ++k_inner_inner5) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner5 + 2)] * B_shared_local[(k_inner_inner5 + 2)]));\n    }\n    for (int ax17 = 0; ax17 < 2; ++ax17) {\n      A_shared_local[(ax17 + 2)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax17) + 14)];\n    }\n    for (int ax07 = 0; ax07 < 2; ++ax07) {\n      B_shared_local[(ax07 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (ax07 * 4)) + ((int)threadIdx.x)) + 56)];\n    }\n    for (int k_inner_inner6 = 0; k_inner_inner6 < 2; ++k_inner_inner6) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner6] * B_shared_local[k_inner_inner6]));\n    }\n    for (int ax18 = 0; ax18 < 2; ++ax18) {\n      A_shared_local[ax18] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax18) + 16)];\n    }\n    for (int ax08 = 0; ax08 < 2; ++ax08) {\n      B_shared_local[ax08] = B_shared[(((((k_outer_outer & 1) * 128) + (ax08 * 4)) + ((int)threadIdx.x)) + 64)];\n    }\n    for (int k_inner_inner7 = 0; k_inner_inner7 < 2; ++k_inner_inner7) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner7 + 2)] * B_shared_local[(k_inner_inner7 + 2)]));\n    }\n    for (int ax19 = 0; ax19 < 2; ++ax19) {\n      A_shared_local[(ax19 + 2)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax19) + 18)];\n    }\n    for (int ax09 = 0; ax09 < 2; ++ax09) {\n      B_shared_local[(ax09 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (ax09 * 4)) + ((int)threadIdx.x)) + 72)];\n    }\n    for (int k_inner_inner8 = 0; k_inner_inner8 < 2; ++k_inner_inner8) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner8] * B_shared_local[k_inner_inner8]));\n    }\n    for (int ax110 = 0; ax110 < 2; ++ax110) {\n      A_shared_local[ax110] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax110) + 20)];\n    }\n    for (int ax010 = 0; ax010 < 2; ++ax010) {\n      B_shared_local[ax010] = B_shared[(((((k_outer_outer & 1) * 128) + (ax010 * 4)) + ((int)threadIdx.x)) + 80)];\n    }\n    for (int k_inner_inner9 = 0; k_inner_inner9 < 2; ++k_inner_inner9) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner9 + 2)] * B_shared_local[(k_inner_inner9 + 2)]));\n    }\n    for (int ax111 = 0; ax111 < 2; ++ax111) {\n      A_shared_local[(ax111 + 2)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax111) + 22)];\n    }\n    for (int ax011 = 0; ax011 < 2; ++ax011) {\n      B_shared_local[(ax011 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (ax011 * 4)) + ((int)threadIdx.x)) + 88)];\n    }\n    for (int k_inner_inner10 = 0; k_inner_inner10 < 2; ++k_inner_inner10) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner10] * B_shared_local[k_inner_inner10]));\n    }\n    for (int ax112 = 0; ax112 < 2; ++ax112) {\n      A_shared_local[ax112] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax112) + 24)];\n    }\n    for (int ax012 = 0; ax012 < 2; ++ax012) {\n      B_shared_local[ax012] = B_shared[(((((k_outer_outer & 1) * 128) + (ax012 * 4)) + ((int)threadIdx.x)) + 96)];\n    }\n    for (int k_inner_inner11 = 0; k_inner_inner11 < 2; ++k_inner_inner11) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner11 + 2)] * B_shared_local[(k_inner_inner11 + 2)]));\n    }\n    for (int ax113 = 0; ax113 < 2; ++ax113) {\n      A_shared_local[(ax113 + 2)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax113) + 26)];\n    }\n    for (int ax013 = 0; ax013 < 2; ++ax013) {\n      B_shared_local[(ax013 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (ax013 * 4)) + ((int)threadIdx.x)) + 104)];\n    }\n    for (int k_inner_inner12 = 0; k_inner_inner12 < 2; ++k_inner_inner12) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner12] * B_shared_local[k_inner_inner12]));\n    }\n    for (int ax114 = 0; ax114 < 2; ++ax114) {\n      A_shared_local[ax114] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax114) + 28)];\n    }\n    for (int ax014 = 0; ax014 < 2; ++ax014) {\n      B_shared_local[ax014] = B_shared[(((((k_outer_outer & 1) * 128) + (ax014 * 4)) + ((int)threadIdx.x)) + 112)];\n    }\n    for (int k_inner_inner13 = 0; k_inner_inner13 < 2; ++k_inner_inner13) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner13 + 2)] * B_shared_local[(k_inner_inner13 + 2)]));\n    }\n    for (int ax115 = 0; ax115 < 2; ++ax115) {\n      A_shared_local[(ax115 + 2)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax115) + 30)];\n    }\n    for (int ax015 = 0; ax015 < 2; ++ax015) {\n      B_shared_local[(ax015 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (ax015 * 4)) + ((int)threadIdx.x)) + 120)];\n    }\n    for (int k_inner_inner14 = 0; k_inner_inner14 < 2; ++k_inner_inner14) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner14] * B_shared_local[k_inner_inner14]));\n    }\n    for (int k_inner_inner15 = 0; k_inner_inner15 < 2; ++k_inner_inner15) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner15 + 2)] * B_shared_local[(k_inner_inner15 + 2)]));\n    }\n  }\n  __syncthreads();\n  for (int ax116 = 0; ax116 < 2; ++ax116) {\n    A_shared_local1[ax116] = A_shared[(((((int)threadIdx.y) * 32) + ax116) + 128)];\n  }\n  for (int ax016 = 0; ax016 < 2; ++ax016) {\n    B_shared_local1[ax016] = B_shared[(((ax016 * 4) + ((int)threadIdx.x)) + 128)];\n  }\n  for (int ax117 = 0; ax117 < 2; ++ax117) {\n    A_shared_local1[(ax117 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax117) + 130)];\n  }\n  for (int ax017 = 0; ax017 < 2; ++ax017) {\n    B_shared_local1[(ax017 + 2)] = B_shared[(((ax017 * 4) + ((int)threadIdx.x)) + 136)];\n  }\n  for (int k_inner_inner16 = 0; k_inner_inner16 < 2; ++k_inner_inner16) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner16] * B_shared_local1[k_inner_inner16]));\n  }\n  for (int ax118 = 0; ax118 < 2; ++ax118) {\n    A_shared_local1[ax118] = A_shared[(((((int)threadIdx.y) * 32) + ax118) + 132)];\n  }\n  for (int ax018 = 0; ax018 < 2; ++ax018) {\n    B_shared_local1[ax018] = B_shared[(((ax018 * 4) + ((int)threadIdx.x)) + 144)];\n  }\n  for (int k_inner_inner17 = 0; k_inner_inner17 < 2; ++k_inner_inner17) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner17 + 2)] * B_shared_local1[(k_inner_inner17 + 2)]));\n  }\n  for (int ax119 = 0; ax119 < 2; ++ax119) {\n    A_shared_local1[(ax119 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax119) + 134)];\n  }\n  for (int ax019 = 0; ax019 < 2; ++ax019) {\n    B_shared_local1[(ax019 + 2)] = B_shared[(((ax019 * 4) + ((int)threadIdx.x)) + 152)];\n  }\n  for (int k_inner_inner18 = 0; k_inner_inner18 < 2; ++k_inner_inner18) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner18] * B_shared_local1[k_inner_inner18]));\n  }\n  for (int ax120 = 0; ax120 < 2; ++ax120) {\n    A_shared_local1[ax120] = A_shared[(((((int)threadIdx.y) * 32) + ax120) + 136)];\n  }\n  for (int ax020 = 0; ax020 < 2; ++ax020) {\n    B_shared_local1[ax020] = B_shared[(((ax020 * 4) + ((int)threadIdx.x)) + 160)];\n  }\n  for (int k_inner_inner19 = 0; k_inner_inner19 < 2; ++k_inner_inner19) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner19 + 2)] * B_shared_local1[(k_inner_inner19 + 2)]));\n  }\n  for (int ax121 = 0; ax121 < 2; ++ax121) {\n    A_shared_local1[(ax121 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax121) + 138)];\n  }\n  for (int ax021 = 0; ax021 < 2; ++ax021) {\n    B_shared_local1[(ax021 + 2)] = B_shared[(((ax021 * 4) + ((int)threadIdx.x)) + 168)];\n  }\n  for (int k_inner_inner20 = 0; k_inner_inner20 < 2; ++k_inner_inner20) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner20] * B_shared_local1[k_inner_inner20]));\n  }\n  for (int ax122 = 0; ax122 < 2; ++ax122) {\n    A_shared_local1[ax122] = A_shared[(((((int)threadIdx.y) * 32) + ax122) + 140)];\n  }\n  for (int ax022 = 0; ax022 < 2; ++ax022) {\n    B_shared_local1[ax022] = B_shared[(((ax022 * 4) + ((int)threadIdx.x)) + 176)];\n  }\n  for (int k_inner_inner21 = 0; k_inner_inner21 < 2; ++k_inner_inner21) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner21 + 2)] * B_shared_local1[(k_inner_inner21 + 2)]));\n  }\n  for (int ax123 = 0; ax123 < 2; ++ax123) {\n    A_shared_local1[(ax123 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax123) + 142)];\n  }\n  for (int ax023 = 0; ax023 < 2; ++ax023) {\n    B_shared_local1[(ax023 + 2)] = B_shared[(((ax023 * 4) + ((int)threadIdx.x)) + 184)];\n  }\n  for (int k_inner_inner22 = 0; k_inner_inner22 < 2; ++k_inner_inner22) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner22] * B_shared_local1[k_inner_inner22]));\n  }\n  for (int ax124 = 0; ax124 < 2; ++ax124) {\n    A_shared_local1[ax124] = A_shared[(((((int)threadIdx.y) * 32) + ax124) + 144)];\n  }\n  for (int ax024 = 0; ax024 < 2; ++ax024) {\n    B_shared_local1[ax024] = B_shared[(((ax024 * 4) + ((int)threadIdx.x)) + 192)];\n  }\n  for (int k_inner_inner23 = 0; k_inner_inner23 < 2; ++k_inner_inner23) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner23 + 2)] * B_shared_local1[(k_inner_inner23 + 2)]));\n  }\n  for (int ax125 = 0; ax125 < 2; ++ax125) {\n    A_shared_local1[(ax125 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax125) + 146)];\n  }\n  for (int ax025 = 0; ax025 < 2; ++ax025) {\n    B_shared_local1[(ax025 + 2)] = B_shared[(((ax025 * 4) + ((int)threadIdx.x)) + 200)];\n  }\n  for (int k_inner_inner24 = 0; k_inner_inner24 < 2; ++k_inner_inner24) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner24] * B_shared_local1[k_inner_inner24]));\n  }\n  for (int ax126 = 0; ax126 < 2; ++ax126) {\n    A_shared_local1[ax126] = A_shared[(((((int)threadIdx.y) * 32) + ax126) + 148)];\n  }\n  for (int ax026 = 0; ax026 < 2; ++ax026) {\n    B_shared_local1[ax026] = B_shared[(((ax026 * 4) + ((int)threadIdx.x)) + 208)];\n  }\n  for (int k_inner_inner25 = 0; k_inner_inner25 < 2; ++k_inner_inner25) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner25 + 2)] * B_shared_local1[(k_inner_inner25 + 2)]));\n  }\n  for (int ax127 = 0; ax127 < 2; ++ax127) {\n    A_shared_local1[(ax127 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax127) + 150)];\n  }\n  for (int ax027 = 0; ax027 < 2; ++ax027) {\n    B_shared_local1[(ax027 + 2)] = B_shared[(((ax027 * 4) + ((int)threadIdx.x)) + 216)];\n  }\n  for (int k_inner_inner26 = 0; k_inner_inner26 < 2; ++k_inner_inner26) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner26] * B_shared_local1[k_inner_inner26]));\n  }\n  for (int ax128 = 0; ax128 < 2; ++ax128) {\n    A_shared_local1[ax128] = A_shared[(((((int)threadIdx.y) * 32) + ax128) + 152)];\n  }\n  for (int ax028 = 0; ax028 < 2; ++ax028) {\n    B_shared_local1[ax028] = B_shared[(((ax028 * 4) + ((int)threadIdx.x)) + 224)];\n  }\n  for (int k_inner_inner27 = 0; k_inner_inner27 < 2; ++k_inner_inner27) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner27 + 2)] * B_shared_local1[(k_inner_inner27 + 2)]));\n  }\n  for (int ax129 = 0; ax129 < 2; ++ax129) {\n    A_shared_local1[(ax129 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax129) + 154)];\n  }\n  for (int ax029 = 0; ax029 < 2; ++ax029) {\n    B_shared_local1[(ax029 + 2)] = B_shared[(((ax029 * 4) + ((int)threadIdx.x)) + 232)];\n  }\n  for (int k_inner_inner28 = 0; k_inner_inner28 < 2; ++k_inner_inner28) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner28] * B_shared_local1[k_inner_inner28]));\n  }\n  for (int ax130 = 0; ax130 < 2; ++ax130) {\n    A_shared_local1[ax130] = A_shared[(((((int)threadIdx.y) * 32) + ax130) + 156)];\n  }\n  for (int ax030 = 0; ax030 < 2; ++ax030) {\n    B_shared_local1[ax030] = B_shared[(((ax030 * 4) + ((int)threadIdx.x)) + 240)];\n  }\n  for (int k_inner_inner29 = 0; k_inner_inner29 < 2; ++k_inner_inner29) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner29 + 2)] * B_shared_local1[(k_inner_inner29 + 2)]));\n  }\n  for (int ax131 = 0; ax131 < 2; ++ax131) {\n    A_shared_local1[(ax131 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax131) + 158)];\n  }\n  for (int ax031 = 0; ax031 < 2; ++ax031) {\n    B_shared_local1[(ax031 + 2)] = B_shared[(((ax031 * 4) + ((int)threadIdx.x)) + 248)];\n  }\n  for (int k_inner_inner30 = 0; k_inner_inner30 < 2; ++k_inner_inner30) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner30] * B_shared_local1[k_inner_inner30]));\n  }\n  for (int k_inner_inner31 = 0; k_inner_inner31 < 2; ++k_inner_inner31) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner31 + 2)] * B_shared_local1[(k_inner_inner31 + 2)]));\n  }\n  C[(((((int)threadIdx.y) * 512) + (((int)blockIdx.x) * 4)) + ((int)threadIdx.x))] = C_local[0];\n}\n\n", "gridDim": [128, 1, 1], "blockDim": [4, 4, 1]}, {"tvm_func_name": "tuned_dot_nn_op_float_m4_k512_n1024_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [4, 512], "arg1_shape": [512, 1024], "out_shape": [4, 1024], "transpose_A": false, "transpose_B": false}, "code": "extern \"C\" __global__ void tuned_dot_nn_op_float_m4_k512_n1024_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ C) {\n   float C_local[1];\n  __shared__ float A_shared[256];\n  __shared__ float B_shared[512];\n   float A_shared_local[8];\n   float B_shared_local[8];\n   float A_shared_local1[8];\n   float B_shared_local1[8];\n  C_local[0] = 0.000000e+00f;\n  ((__shared__ float4*)(A_shared + ((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4))))[0] = (( float4*)(A + ((((int)threadIdx.y) * 512) + (((int)threadIdx.x) * 4))))[0];\n  for (int ax0_ax1_fused_inner_inner_outer = 0; ax0_ax1_fused_inner_inner_outer < 2; ++ax0_ax1_fused_inner_inner_outer) {\n    ((__shared__ float4*)(B_shared + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer * 4))))[0] = (( float4*)(B + ((((((int)threadIdx.y) * 8192) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer * 4))))[0];\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 15; ++k_outer_outer) {\n    __syncthreads();\n    ((__shared__ float4*)(A_shared + (((((k_outer_outer + 1) & 1) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4))))[0] = (( float4*)(A + ((((((int)threadIdx.y) * 512) + (k_outer_outer * 32)) + (((int)threadIdx.x) * 4)) + 32)))[0];\n    for (int ax0_ax1_fused_inner_inner_outer1 = 0; ax0_ax1_fused_inner_inner_outer1 < 2; ++ax0_ax1_fused_inner_inner_outer1) {\n      ((__shared__ float4*)(B_shared + ((((((k_outer_outer + 1) & 1) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer1 * 4))))[0] = (( float4*)(B + ((((((k_outer_outer * 32768) + (((int)threadIdx.y) * 8192)) + (((int)threadIdx.x) * 1024)) + (((int)blockIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer1 * 4)) + 32768)))[0];\n    }\n    for (int ax1 = 0; ax1 < 4; ++ax1) {\n      A_shared_local[ax1] = A_shared[((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax1)];\n    }\n    for (int ax0 = 0; ax0 < 4; ++ax0) {\n      B_shared_local[ax0] = B_shared[((((k_outer_outer & 1) * 256) + (ax0 * 8)) + ((int)threadIdx.x))];\n    }\n    for (int ax11 = 0; ax11 < 4; ++ax11) {\n      A_shared_local[(ax11 + 4)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax11) + 4)];\n    }\n    for (int ax01 = 0; ax01 < 4; ++ax01) {\n      B_shared_local[(ax01 + 4)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax01 * 8)) + ((int)threadIdx.x)) + 32)];\n    }\n    for (int k_inner_inner = 0; k_inner_inner < 4; ++k_inner_inner) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner] * B_shared_local[k_inner_inner]));\n    }\n    for (int ax12 = 0; ax12 < 4; ++ax12) {\n      A_shared_local[ax12] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax12) + 8)];\n    }\n    for (int ax02 = 0; ax02 < 4; ++ax02) {\n      B_shared_local[ax02] = B_shared[(((((k_outer_outer & 1) * 256) + (ax02 * 8)) + ((int)threadIdx.x)) + 64)];\n    }\n    for (int k_inner_inner1 = 0; k_inner_inner1 < 4; ++k_inner_inner1) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner1 + 4)] * B_shared_local[(k_inner_inner1 + 4)]));\n    }\n    for (int ax13 = 0; ax13 < 4; ++ax13) {\n      A_shared_local[(ax13 + 4)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax13) + 12)];\n    }\n    for (int ax03 = 0; ax03 < 4; ++ax03) {\n      B_shared_local[(ax03 + 4)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax03 * 8)) + ((int)threadIdx.x)) + 96)];\n    }\n    for (int k_inner_inner2 = 0; k_inner_inner2 < 4; ++k_inner_inner2) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner2] * B_shared_local[k_inner_inner2]));\n    }\n    for (int ax14 = 0; ax14 < 4; ++ax14) {\n      A_shared_local[ax14] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax14) + 16)];\n    }\n    for (int ax04 = 0; ax04 < 4; ++ax04) {\n      B_shared_local[ax04] = B_shared[(((((k_outer_outer & 1) * 256) + (ax04 * 8)) + ((int)threadIdx.x)) + 128)];\n    }\n    for (int k_inner_inner3 = 0; k_inner_inner3 < 4; ++k_inner_inner3) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner3 + 4)] * B_shared_local[(k_inner_inner3 + 4)]));\n    }\n    for (int ax15 = 0; ax15 < 4; ++ax15) {\n      A_shared_local[(ax15 + 4)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax15) + 20)];\n    }\n    for (int ax05 = 0; ax05 < 4; ++ax05) {\n      B_shared_local[(ax05 + 4)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax05 * 8)) + ((int)threadIdx.x)) + 160)];\n    }\n    for (int k_inner_inner4 = 0; k_inner_inner4 < 4; ++k_inner_inner4) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner4] * B_shared_local[k_inner_inner4]));\n    }\n    for (int ax16 = 0; ax16 < 4; ++ax16) {\n      A_shared_local[ax16] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax16) + 24)];\n    }\n    for (int ax06 = 0; ax06 < 4; ++ax06) {\n      B_shared_local[ax06] = B_shared[(((((k_outer_outer & 1) * 256) + (ax06 * 8)) + ((int)threadIdx.x)) + 192)];\n    }\n    for (int k_inner_inner5 = 0; k_inner_inner5 < 4; ++k_inner_inner5) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner5 + 4)] * B_shared_local[(k_inner_inner5 + 4)]));\n    }\n    for (int ax17 = 0; ax17 < 4; ++ax17) {\n      A_shared_local[(ax17 + 4)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax17) + 28)];\n    }\n    for (int ax07 = 0; ax07 < 4; ++ax07) {\n      B_shared_local[(ax07 + 4)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax07 * 8)) + ((int)threadIdx.x)) + 224)];\n    }\n    for (int k_inner_inner6 = 0; k_inner_inner6 < 4; ++k_inner_inner6) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner6] * B_shared_local[k_inner_inner6]));\n    }\n    for (int k_inner_inner7 = 0; k_inner_inner7 < 4; ++k_inner_inner7) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner7 + 4)] * B_shared_local[(k_inner_inner7 + 4)]));\n    }\n  }\n  __syncthreads();\n  for (int ax18 = 0; ax18 < 4; ++ax18) {\n    A_shared_local1[ax18] = A_shared[(((((int)threadIdx.y) * 32) + ax18) + 128)];\n  }\n  for (int ax08 = 0; ax08 < 4; ++ax08) {\n    B_shared_local1[ax08] = B_shared[(((ax08 * 8) + ((int)threadIdx.x)) + 256)];\n  }\n  for (int ax19 = 0; ax19 < 4; ++ax19) {\n    A_shared_local1[(ax19 + 4)] = A_shared[(((((int)threadIdx.y) * 32) + ax19) + 132)];\n  }\n  for (int ax09 = 0; ax09 < 4; ++ax09) {\n    B_shared_local1[(ax09 + 4)] = B_shared[(((ax09 * 8) + ((int)threadIdx.x)) + 288)];\n  }\n  for (int k_inner_inner8 = 0; k_inner_inner8 < 4; ++k_inner_inner8) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner8] * B_shared_local1[k_inner_inner8]));\n  }\n  for (int ax110 = 0; ax110 < 4; ++ax110) {\n    A_shared_local1[ax110] = A_shared[(((((int)threadIdx.y) * 32) + ax110) + 136)];\n  }\n  for (int ax010 = 0; ax010 < 4; ++ax010) {\n    B_shared_local1[ax010] = B_shared[(((ax010 * 8) + ((int)threadIdx.x)) + 320)];\n  }\n  for (int k_inner_inner9 = 0; k_inner_inner9 < 4; ++k_inner_inner9) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner9 + 4)] * B_shared_local1[(k_inner_inner9 + 4)]));\n  }\n  for (int ax111 = 0; ax111 < 4; ++ax111) {\n    A_shared_local1[(ax111 + 4)] = A_shared[(((((int)threadIdx.y) * 32) + ax111) + 140)];\n  }\n  for (int ax011 = 0; ax011 < 4; ++ax011) {\n    B_shared_local1[(ax011 + 4)] = B_shared[(((ax011 * 8) + ((int)threadIdx.x)) + 352)];\n  }\n  for (int k_inner_inner10 = 0; k_inner_inner10 < 4; ++k_inner_inner10) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner10] * B_shared_local1[k_inner_inner10]));\n  }\n  for (int ax112 = 0; ax112 < 4; ++ax112) {\n    A_shared_local1[ax112] = A_shared[(((((int)threadIdx.y) * 32) + ax112) + 144)];\n  }\n  for (int ax012 = 0; ax012 < 4; ++ax012) {\n    B_shared_local1[ax012] = B_shared[(((ax012 * 8) + ((int)threadIdx.x)) + 384)];\n  }\n  for (int k_inner_inner11 = 0; k_inner_inner11 < 4; ++k_inner_inner11) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner11 + 4)] * B_shared_local1[(k_inner_inner11 + 4)]));\n  }\n  for (int ax113 = 0; ax113 < 4; ++ax113) {\n    A_shared_local1[(ax113 + 4)] = A_shared[(((((int)threadIdx.y) * 32) + ax113) + 148)];\n  }\n  for (int ax013 = 0; ax013 < 4; ++ax013) {\n    B_shared_local1[(ax013 + 4)] = B_shared[(((ax013 * 8) + ((int)threadIdx.x)) + 416)];\n  }\n  for (int k_inner_inner12 = 0; k_inner_inner12 < 4; ++k_inner_inner12) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner12] * B_shared_local1[k_inner_inner12]));\n  }\n  for (int ax114 = 0; ax114 < 4; ++ax114) {\n    A_shared_local1[ax114] = A_shared[(((((int)threadIdx.y) * 32) + ax114) + 152)];\n  }\n  for (int ax014 = 0; ax014 < 4; ++ax014) {\n    B_shared_local1[ax014] = B_shared[(((ax014 * 8) + ((int)threadIdx.x)) + 448)];\n  }\n  for (int k_inner_inner13 = 0; k_inner_inner13 < 4; ++k_inner_inner13) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner13 + 4)] * B_shared_local1[(k_inner_inner13 + 4)]));\n  }\n  for (int ax115 = 0; ax115 < 4; ++ax115) {\n    A_shared_local1[(ax115 + 4)] = A_shared[(((((int)threadIdx.y) * 32) + ax115) + 156)];\n  }\n  for (int ax015 = 0; ax015 < 4; ++ax015) {\n    B_shared_local1[(ax015 + 4)] = B_shared[(((ax015 * 8) + ((int)threadIdx.x)) + 480)];\n  }\n  for (int k_inner_inner14 = 0; k_inner_inner14 < 4; ++k_inner_inner14) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner14] * B_shared_local1[k_inner_inner14]));\n  }\n  for (int k_inner_inner15 = 0; k_inner_inner15 < 4; ++k_inner_inner15) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner15 + 4)] * B_shared_local1[(k_inner_inner15 + 4)]));\n  }\n  C[(((((int)threadIdx.y) * 1024) + (((int)blockIdx.x) * 8)) + ((int)threadIdx.x))] = C_local[0];\n}\n\n", "gridDim": [128, 1, 1], "blockDim": [8, 4, 1]}, {"tvm_func_name": "tuned_dot_nn_op_float_m4_k3008_n1024_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [4, 3008], "arg1_shape": [3008, 1024], "out_shape": [4, 1024], "transpose_A": false, "transpose_B": false}, "code": "extern \"C\" __global__ void tuned_dot_nn_op_float_m4_k3008_n1024_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ C) {\n   float C_local[1];\n  __shared__ float A_shared[512];\n  __shared__ float B_shared[512];\n   float A_shared_local[2];\n   float B_shared_local[2];\n   float A_shared_local1[2];\n   float B_shared_local1[2];\n  C_local[0] = 0.000000e+00f;\n  for (int ax0_ax1_fused_inner_inner_outer = 0; ax0_ax1_fused_inner_inner_outer < 4; ++ax0_ax1_fused_inner_inner_outer) {\n    ((__shared__ float4*)(A_shared + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 16)) + (ax0_ax1_fused_inner_inner_outer * 4))))[0] = (( float4*)(A + (((((int)threadIdx.y) * 3008) + (((int)threadIdx.x) * 16)) + (ax0_ax1_fused_inner_inner_outer * 4))))[0];\n  }\n  for (int ax0_ax1_fused_inner_inner_outer1 = 0; ax0_ax1_fused_inner_inner_outer1 < 4; ++ax0_ax1_fused_inner_inner_outer1) {\n    ((__shared__ float4*)(B_shared + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 16)) + (ax0_ax1_fused_inner_inner_outer1 * 4))))[0] = (( float4*)(B + ((((((int)threadIdx.y) * 16384) + (((int)threadIdx.x) * 4096)) + (ax0_ax1_fused_inner_inner_outer1 * 1024)) + (((int)blockIdx.x) * 4))))[0];\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 46; ++k_outer_outer) {\n    __syncthreads();\n    for (int ax0_ax1_fused_inner_inner_outer2 = 0; ax0_ax1_fused_inner_inner_outer2 < 4; ++ax0_ax1_fused_inner_inner_outer2) {\n      ((__shared__ float4*)(A_shared + ((((((k_outer_outer + 1) & 1) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 16)) + (ax0_ax1_fused_inner_inner_outer2 * 4))))[0] = (( float4*)(A + (((((((int)threadIdx.y) * 3008) + (k_outer_outer * 64)) + (((int)threadIdx.x) * 16)) + (ax0_ax1_fused_inner_inner_outer2 * 4)) + 64)))[0];\n    }\n    for (int ax0_ax1_fused_inner_inner_outer3 = 0; ax0_ax1_fused_inner_inner_outer3 < 4; ++ax0_ax1_fused_inner_inner_outer3) {\n      ((__shared__ float4*)(B_shared + ((((((k_outer_outer + 1) & 1) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 16)) + (ax0_ax1_fused_inner_inner_outer3 * 4))))[0] = (( float4*)(B + ((((((k_outer_outer * 65536) + (((int)threadIdx.y) * 16384)) + (((int)threadIdx.x) * 4096)) + (ax0_ax1_fused_inner_inner_outer3 * 1024)) + (((int)blockIdx.x) * 4)) + 65536)))[0];\n    }\n    A_shared_local[0] = A_shared[(((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64))];\n    B_shared_local[0] = B_shared[(((k_outer_outer & 1) * 256) + ((int)threadIdx.x))];\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 1)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 4)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 2)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 8)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 3)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 12)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 4)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 16)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 5)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 20)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 6)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 24)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 7)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 28)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 8)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 32)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 9)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 36)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 10)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 40)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 11)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 44)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 12)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 48)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 13)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 52)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 14)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 56)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 15)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 60)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 16)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 64)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 17)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 68)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 18)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 72)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 19)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 76)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 20)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 80)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 21)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 84)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 22)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 88)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 23)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 92)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 24)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 96)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 25)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 100)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 26)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 104)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 27)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 108)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 28)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 112)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 29)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 116)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 30)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 120)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 31)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 124)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 32)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 128)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 33)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 132)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 34)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 136)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 35)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 140)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 36)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 144)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 37)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 148)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 38)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 152)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 39)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 156)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 40)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 160)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 41)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 164)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 42)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 168)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 43)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 172)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 44)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 176)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 45)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 180)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 46)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 184)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 47)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 188)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 48)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 192)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 49)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 196)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 50)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 200)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 51)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 204)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 52)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 208)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 53)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 212)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 54)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 216)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 55)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 220)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 56)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 224)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 57)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 228)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 58)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 232)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 59)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 236)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 60)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 240)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 61)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 244)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 62)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 248)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 64)) + 63)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 256) + ((int)threadIdx.x)) + 252)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n  }\n  __syncthreads();\n  A_shared_local1[0] = A_shared[(((int)threadIdx.y) * 64)];\n  B_shared_local1[0] = B_shared[((int)threadIdx.x)];\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 1)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 4)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 2)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 8)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 3)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 12)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 4)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 16)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 5)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 20)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 6)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 24)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 7)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 28)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 8)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 32)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 9)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 36)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 10)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 40)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 11)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 44)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 12)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 48)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 13)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 52)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 14)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 56)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 15)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 60)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 16)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 64)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 17)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 68)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 18)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 72)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 19)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 76)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 20)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 80)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 21)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 84)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 22)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 88)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 23)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 92)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 24)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 96)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 25)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 100)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 26)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 104)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 27)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 108)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 28)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 112)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 29)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 116)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 30)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 120)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 31)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 124)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 32)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 128)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 33)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 132)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 34)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 136)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 35)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 140)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 36)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 144)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 37)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 148)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 38)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 152)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 39)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 156)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 40)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 160)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 41)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 164)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 42)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 168)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 43)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 172)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 44)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 176)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 45)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 180)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 46)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 184)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 47)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 188)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 48)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 192)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 49)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 196)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 50)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 200)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 51)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 204)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 52)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 208)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 53)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 212)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 54)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 216)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 55)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 220)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 56)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 224)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 57)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 228)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 58)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 232)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 59)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 236)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 60)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 240)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 61)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 244)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 64) + 62)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 248)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 64) + 63)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 252)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  C[(((((int)threadIdx.y) * 1024) + (((int)blockIdx.x) * 4)) + ((int)threadIdx.x))] = C_local[0];\n}\n\n", "gridDim": [256, 1, 1], "blockDim": [4, 4, 1]}, {"tvm_func_name": "tuned_dot_nn_op_float_m16_k256_n256_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [16, 256], "arg1_shape": [256, 256], "out_shape": [16, 256], "transpose_A": false, "transpose_B": false}, "code": "extern \"C\" __global__ void tuned_dot_nn_op_float_m16_k256_n256_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ C) {\n   float C_local[1];\n  __shared__ float A_shared[1024];\n  __shared__ float B_shared[512];\n   float A_shared_local[4];\n   float B_shared_local[4];\n   float A_shared_local1[4];\n   float B_shared_local1[4];\n  C_local[0] = 0.000000e+00f;\n  ((__shared__ float4*)(A_shared + ((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4))))[0] = (( float4*)(A + ((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 4))))[0];\n  for (int ax0_ax1_fused_inner_inner_inner_s = 0; ax0_ax1_fused_inner_inner_inner_s < 4; ++ax0_ax1_fused_inner_inner_inner_s) {\n    if (((((int)threadIdx.y) * 2) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) >> 3)) < 32) {\n      if ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s) < 256) {\n        if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) < 16) {\n          if (ax0_ax1_fused_inner_inner_inner_s < 2) {\n            B_shared[(((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s)] = B[((((((int)threadIdx.y) * 512) + ((((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) >> 3) * 256)) + (((int)blockIdx.x) * 8)) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) & 7))];\n          }\n        }\n      }\n    }\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 7; ++k_outer_outer) {\n    __syncthreads();\n    ((__shared__ float4*)(A_shared + (((((k_outer_outer + 1) & 1) * 512) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4))))[0] = (( float4*)(A + ((((((int)threadIdx.y) * 256) + (k_outer_outer * 32)) + (((int)threadIdx.x) * 4)) + 32)))[0];\n    for (int ax0_ax1_fused_inner_inner_inner_s1 = 0; ax0_ax1_fused_inner_inner_inner_s1 < 4; ++ax0_ax1_fused_inner_inner_inner_s1) {\n      if (((((int)threadIdx.y) * 2) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) >> 3)) < 32) {\n        if ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s1) < 256) {\n          if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) < 16) {\n            if (ax0_ax1_fused_inner_inner_inner_s1 < 2) {\n              B_shared[((((((k_outer_outer + 1) & 1) * 256) + (((int)threadIdx.y) * 16)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s1)] = B[((((((k_outer_outer * 8192) + (((int)threadIdx.y) * 512)) + ((((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) >> 3) * 256)) + (((int)blockIdx.x) * 8)) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) & 7)) + 8192)];\n            }\n          }\n        }\n      }\n    }\n    for (int ax1 = 0; ax1 < 2; ++ax1) {\n      A_shared_local[ax1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax1)];\n    }\n    for (int ax0 = 0; ax0 < 2; ++ax0) {\n      B_shared_local[ax0] = B_shared[((((k_outer_outer & 1) * 256) + (ax0 * 8)) + ((int)threadIdx.x))];\n    }\n    for (int ax11 = 0; ax11 < 2; ++ax11) {\n      A_shared_local[(ax11 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax11) + 2)];\n    }\n    for (int ax01 = 0; ax01 < 2; ++ax01) {\n      B_shared_local[(ax01 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax01 * 8)) + ((int)threadIdx.x)) + 16)];\n    }\n    for (int k_inner_inner = 0; k_inner_inner < 2; ++k_inner_inner) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner] * B_shared_local[k_inner_inner]));\n    }\n    for (int ax12 = 0; ax12 < 2; ++ax12) {\n      A_shared_local[ax12] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax12) + 4)];\n    }\n    for (int ax02 = 0; ax02 < 2; ++ax02) {\n      B_shared_local[ax02] = B_shared[(((((k_outer_outer & 1) * 256) + (ax02 * 8)) + ((int)threadIdx.x)) + 32)];\n    }\n    for (int k_inner_inner1 = 0; k_inner_inner1 < 2; ++k_inner_inner1) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner1 + 2)] * B_shared_local[(k_inner_inner1 + 2)]));\n    }\n    for (int ax13 = 0; ax13 < 2; ++ax13) {\n      A_shared_local[(ax13 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax13) + 6)];\n    }\n    for (int ax03 = 0; ax03 < 2; ++ax03) {\n      B_shared_local[(ax03 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax03 * 8)) + ((int)threadIdx.x)) + 48)];\n    }\n    for (int k_inner_inner2 = 0; k_inner_inner2 < 2; ++k_inner_inner2) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner2] * B_shared_local[k_inner_inner2]));\n    }\n    for (int ax14 = 0; ax14 < 2; ++ax14) {\n      A_shared_local[ax14] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax14) + 8)];\n    }\n    for (int ax04 = 0; ax04 < 2; ++ax04) {\n      B_shared_local[ax04] = B_shared[(((((k_outer_outer & 1) * 256) + (ax04 * 8)) + ((int)threadIdx.x)) + 64)];\n    }\n    for (int k_inner_inner3 = 0; k_inner_inner3 < 2; ++k_inner_inner3) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner3 + 2)] * B_shared_local[(k_inner_inner3 + 2)]));\n    }\n    for (int ax15 = 0; ax15 < 2; ++ax15) {\n      A_shared_local[(ax15 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax15) + 10)];\n    }\n    for (int ax05 = 0; ax05 < 2; ++ax05) {\n      B_shared_local[(ax05 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax05 * 8)) + ((int)threadIdx.x)) + 80)];\n    }\n    for (int k_inner_inner4 = 0; k_inner_inner4 < 2; ++k_inner_inner4) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner4] * B_shared_local[k_inner_inner4]));\n    }\n    for (int ax16 = 0; ax16 < 2; ++ax16) {\n      A_shared_local[ax16] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax16) + 12)];\n    }\n    for (int ax06 = 0; ax06 < 2; ++ax06) {\n      B_shared_local[ax06] = B_shared[(((((k_outer_outer & 1) * 256) + (ax06 * 8)) + ((int)threadIdx.x)) + 96)];\n    }\n    for (int k_inner_inner5 = 0; k_inner_inner5 < 2; ++k_inner_inner5) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner5 + 2)] * B_shared_local[(k_inner_inner5 + 2)]));\n    }\n    for (int ax17 = 0; ax17 < 2; ++ax17) {\n      A_shared_local[(ax17 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax17) + 14)];\n    }\n    for (int ax07 = 0; ax07 < 2; ++ax07) {\n      B_shared_local[(ax07 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax07 * 8)) + ((int)threadIdx.x)) + 112)];\n    }\n    for (int k_inner_inner6 = 0; k_inner_inner6 < 2; ++k_inner_inner6) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner6] * B_shared_local[k_inner_inner6]));\n    }\n    for (int ax18 = 0; ax18 < 2; ++ax18) {\n      A_shared_local[ax18] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax18) + 16)];\n    }\n    for (int ax08 = 0; ax08 < 2; ++ax08) {\n      B_shared_local[ax08] = B_shared[(((((k_outer_outer & 1) * 256) + (ax08 * 8)) + ((int)threadIdx.x)) + 128)];\n    }\n    for (int k_inner_inner7 = 0; k_inner_inner7 < 2; ++k_inner_inner7) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner7 + 2)] * B_shared_local[(k_inner_inner7 + 2)]));\n    }\n    for (int ax19 = 0; ax19 < 2; ++ax19) {\n      A_shared_local[(ax19 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax19) + 18)];\n    }\n    for (int ax09 = 0; ax09 < 2; ++ax09) {\n      B_shared_local[(ax09 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax09 * 8)) + ((int)threadIdx.x)) + 144)];\n    }\n    for (int k_inner_inner8 = 0; k_inner_inner8 < 2; ++k_inner_inner8) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner8] * B_shared_local[k_inner_inner8]));\n    }\n    for (int ax110 = 0; ax110 < 2; ++ax110) {\n      A_shared_local[ax110] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax110) + 20)];\n    }\n    for (int ax010 = 0; ax010 < 2; ++ax010) {\n      B_shared_local[ax010] = B_shared[(((((k_outer_outer & 1) * 256) + (ax010 * 8)) + ((int)threadIdx.x)) + 160)];\n    }\n    for (int k_inner_inner9 = 0; k_inner_inner9 < 2; ++k_inner_inner9) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner9 + 2)] * B_shared_local[(k_inner_inner9 + 2)]));\n    }\n    for (int ax111 = 0; ax111 < 2; ++ax111) {\n      A_shared_local[(ax111 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax111) + 22)];\n    }\n    for (int ax011 = 0; ax011 < 2; ++ax011) {\n      B_shared_local[(ax011 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax011 * 8)) + ((int)threadIdx.x)) + 176)];\n    }\n    for (int k_inner_inner10 = 0; k_inner_inner10 < 2; ++k_inner_inner10) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner10] * B_shared_local[k_inner_inner10]));\n    }\n    for (int ax112 = 0; ax112 < 2; ++ax112) {\n      A_shared_local[ax112] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax112) + 24)];\n    }\n    for (int ax012 = 0; ax012 < 2; ++ax012) {\n      B_shared_local[ax012] = B_shared[(((((k_outer_outer & 1) * 256) + (ax012 * 8)) + ((int)threadIdx.x)) + 192)];\n    }\n    for (int k_inner_inner11 = 0; k_inner_inner11 < 2; ++k_inner_inner11) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner11 + 2)] * B_shared_local[(k_inner_inner11 + 2)]));\n    }\n    for (int ax113 = 0; ax113 < 2; ++ax113) {\n      A_shared_local[(ax113 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax113) + 26)];\n    }\n    for (int ax013 = 0; ax013 < 2; ++ax013) {\n      B_shared_local[(ax013 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax013 * 8)) + ((int)threadIdx.x)) + 208)];\n    }\n    for (int k_inner_inner12 = 0; k_inner_inner12 < 2; ++k_inner_inner12) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner12] * B_shared_local[k_inner_inner12]));\n    }\n    for (int ax114 = 0; ax114 < 2; ++ax114) {\n      A_shared_local[ax114] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax114) + 28)];\n    }\n    for (int ax014 = 0; ax014 < 2; ++ax014) {\n      B_shared_local[ax014] = B_shared[(((((k_outer_outer & 1) * 256) + (ax014 * 8)) + ((int)threadIdx.x)) + 224)];\n    }\n    for (int k_inner_inner13 = 0; k_inner_inner13 < 2; ++k_inner_inner13) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner13 + 2)] * B_shared_local[(k_inner_inner13 + 2)]));\n    }\n    for (int ax115 = 0; ax115 < 2; ++ax115) {\n      A_shared_local[(ax115 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax115) + 30)];\n    }\n    for (int ax015 = 0; ax015 < 2; ++ax015) {\n      B_shared_local[(ax015 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax015 * 8)) + ((int)threadIdx.x)) + 240)];\n    }\n    for (int k_inner_inner14 = 0; k_inner_inner14 < 2; ++k_inner_inner14) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner14] * B_shared_local[k_inner_inner14]));\n    }\n    for (int k_inner_inner15 = 0; k_inner_inner15 < 2; ++k_inner_inner15) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner15 + 2)] * B_shared_local[(k_inner_inner15 + 2)]));\n    }\n  }\n  __syncthreads();\n  for (int ax116 = 0; ax116 < 2; ++ax116) {\n    A_shared_local1[ax116] = A_shared[(((((int)threadIdx.y) * 32) + ax116) + 512)];\n  }\n  for (int ax016 = 0; ax016 < 2; ++ax016) {\n    B_shared_local1[ax016] = B_shared[(((ax016 * 8) + ((int)threadIdx.x)) + 256)];\n  }\n  for (int ax117 = 0; ax117 < 2; ++ax117) {\n    A_shared_local1[(ax117 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax117) + 514)];\n  }\n  for (int ax017 = 0; ax017 < 2; ++ax017) {\n    B_shared_local1[(ax017 + 2)] = B_shared[(((ax017 * 8) + ((int)threadIdx.x)) + 272)];\n  }\n  for (int k_inner_inner16 = 0; k_inner_inner16 < 2; ++k_inner_inner16) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner16] * B_shared_local1[k_inner_inner16]));\n  }\n  for (int ax118 = 0; ax118 < 2; ++ax118) {\n    A_shared_local1[ax118] = A_shared[(((((int)threadIdx.y) * 32) + ax118) + 516)];\n  }\n  for (int ax018 = 0; ax018 < 2; ++ax018) {\n    B_shared_local1[ax018] = B_shared[(((ax018 * 8) + ((int)threadIdx.x)) + 288)];\n  }\n  for (int k_inner_inner17 = 0; k_inner_inner17 < 2; ++k_inner_inner17) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner17 + 2)] * B_shared_local1[(k_inner_inner17 + 2)]));\n  }\n  for (int ax119 = 0; ax119 < 2; ++ax119) {\n    A_shared_local1[(ax119 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax119) + 518)];\n  }\n  for (int ax019 = 0; ax019 < 2; ++ax019) {\n    B_shared_local1[(ax019 + 2)] = B_shared[(((ax019 * 8) + ((int)threadIdx.x)) + 304)];\n  }\n  for (int k_inner_inner18 = 0; k_inner_inner18 < 2; ++k_inner_inner18) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner18] * B_shared_local1[k_inner_inner18]));\n  }\n  for (int ax120 = 0; ax120 < 2; ++ax120) {\n    A_shared_local1[ax120] = A_shared[(((((int)threadIdx.y) * 32) + ax120) + 520)];\n  }\n  for (int ax020 = 0; ax020 < 2; ++ax020) {\n    B_shared_local1[ax020] = B_shared[(((ax020 * 8) + ((int)threadIdx.x)) + 320)];\n  }\n  for (int k_inner_inner19 = 0; k_inner_inner19 < 2; ++k_inner_inner19) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner19 + 2)] * B_shared_local1[(k_inner_inner19 + 2)]));\n  }\n  for (int ax121 = 0; ax121 < 2; ++ax121) {\n    A_shared_local1[(ax121 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax121) + 522)];\n  }\n  for (int ax021 = 0; ax021 < 2; ++ax021) {\n    B_shared_local1[(ax021 + 2)] = B_shared[(((ax021 * 8) + ((int)threadIdx.x)) + 336)];\n  }\n  for (int k_inner_inner20 = 0; k_inner_inner20 < 2; ++k_inner_inner20) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner20] * B_shared_local1[k_inner_inner20]));\n  }\n  for (int ax122 = 0; ax122 < 2; ++ax122) {\n    A_shared_local1[ax122] = A_shared[(((((int)threadIdx.y) * 32) + ax122) + 524)];\n  }\n  for (int ax022 = 0; ax022 < 2; ++ax022) {\n    B_shared_local1[ax022] = B_shared[(((ax022 * 8) + ((int)threadIdx.x)) + 352)];\n  }\n  for (int k_inner_inner21 = 0; k_inner_inner21 < 2; ++k_inner_inner21) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner21 + 2)] * B_shared_local1[(k_inner_inner21 + 2)]));\n  }\n  for (int ax123 = 0; ax123 < 2; ++ax123) {\n    A_shared_local1[(ax123 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax123) + 526)];\n  }\n  for (int ax023 = 0; ax023 < 2; ++ax023) {\n    B_shared_local1[(ax023 + 2)] = B_shared[(((ax023 * 8) + ((int)threadIdx.x)) + 368)];\n  }\n  for (int k_inner_inner22 = 0; k_inner_inner22 < 2; ++k_inner_inner22) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner22] * B_shared_local1[k_inner_inner22]));\n  }\n  for (int ax124 = 0; ax124 < 2; ++ax124) {\n    A_shared_local1[ax124] = A_shared[(((((int)threadIdx.y) * 32) + ax124) + 528)];\n  }\n  for (int ax024 = 0; ax024 < 2; ++ax024) {\n    B_shared_local1[ax024] = B_shared[(((ax024 * 8) + ((int)threadIdx.x)) + 384)];\n  }\n  for (int k_inner_inner23 = 0; k_inner_inner23 < 2; ++k_inner_inner23) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner23 + 2)] * B_shared_local1[(k_inner_inner23 + 2)]));\n  }\n  for (int ax125 = 0; ax125 < 2; ++ax125) {\n    A_shared_local1[(ax125 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax125) + 530)];\n  }\n  for (int ax025 = 0; ax025 < 2; ++ax025) {\n    B_shared_local1[(ax025 + 2)] = B_shared[(((ax025 * 8) + ((int)threadIdx.x)) + 400)];\n  }\n  for (int k_inner_inner24 = 0; k_inner_inner24 < 2; ++k_inner_inner24) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner24] * B_shared_local1[k_inner_inner24]));\n  }\n  for (int ax126 = 0; ax126 < 2; ++ax126) {\n    A_shared_local1[ax126] = A_shared[(((((int)threadIdx.y) * 32) + ax126) + 532)];\n  }\n  for (int ax026 = 0; ax026 < 2; ++ax026) {\n    B_shared_local1[ax026] = B_shared[(((ax026 * 8) + ((int)threadIdx.x)) + 416)];\n  }\n  for (int k_inner_inner25 = 0; k_inner_inner25 < 2; ++k_inner_inner25) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner25 + 2)] * B_shared_local1[(k_inner_inner25 + 2)]));\n  }\n  for (int ax127 = 0; ax127 < 2; ++ax127) {\n    A_shared_local1[(ax127 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax127) + 534)];\n  }\n  for (int ax027 = 0; ax027 < 2; ++ax027) {\n    B_shared_local1[(ax027 + 2)] = B_shared[(((ax027 * 8) + ((int)threadIdx.x)) + 432)];\n  }\n  for (int k_inner_inner26 = 0; k_inner_inner26 < 2; ++k_inner_inner26) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner26] * B_shared_local1[k_inner_inner26]));\n  }\n  for (int ax128 = 0; ax128 < 2; ++ax128) {\n    A_shared_local1[ax128] = A_shared[(((((int)threadIdx.y) * 32) + ax128) + 536)];\n  }\n  for (int ax028 = 0; ax028 < 2; ++ax028) {\n    B_shared_local1[ax028] = B_shared[(((ax028 * 8) + ((int)threadIdx.x)) + 448)];\n  }\n  for (int k_inner_inner27 = 0; k_inner_inner27 < 2; ++k_inner_inner27) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner27 + 2)] * B_shared_local1[(k_inner_inner27 + 2)]));\n  }\n  for (int ax129 = 0; ax129 < 2; ++ax129) {\n    A_shared_local1[(ax129 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax129) + 538)];\n  }\n  for (int ax029 = 0; ax029 < 2; ++ax029) {\n    B_shared_local1[(ax029 + 2)] = B_shared[(((ax029 * 8) + ((int)threadIdx.x)) + 464)];\n  }\n  for (int k_inner_inner28 = 0; k_inner_inner28 < 2; ++k_inner_inner28) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner28] * B_shared_local1[k_inner_inner28]));\n  }\n  for (int ax130 = 0; ax130 < 2; ++ax130) {\n    A_shared_local1[ax130] = A_shared[(((((int)threadIdx.y) * 32) + ax130) + 540)];\n  }\n  for (int ax030 = 0; ax030 < 2; ++ax030) {\n    B_shared_local1[ax030] = B_shared[(((ax030 * 8) + ((int)threadIdx.x)) + 480)];\n  }\n  for (int k_inner_inner29 = 0; k_inner_inner29 < 2; ++k_inner_inner29) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner29 + 2)] * B_shared_local1[(k_inner_inner29 + 2)]));\n  }\n  for (int ax131 = 0; ax131 < 2; ++ax131) {\n    A_shared_local1[(ax131 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax131) + 542)];\n  }\n  for (int ax031 = 0; ax031 < 2; ++ax031) {\n    B_shared_local1[(ax031 + 2)] = B_shared[(((ax031 * 8) + ((int)threadIdx.x)) + 496)];\n  }\n  for (int k_inner_inner30 = 0; k_inner_inner30 < 2; ++k_inner_inner30) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner30] * B_shared_local1[k_inner_inner30]));\n  }\n  for (int k_inner_inner31 = 0; k_inner_inner31 < 2; ++k_inner_inner31) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner31 + 2)] * B_shared_local1[(k_inner_inner31 + 2)]));\n  }\n  C[(((((int)threadIdx.y) * 256) + (((int)blockIdx.x) * 8)) + ((int)threadIdx.x))] = C_local[0];\n}\n\n", "gridDim": [32, 1, 1], "blockDim": [8, 16, 1]}, {"tvm_func_name": "tuned_dot_nn_op_float_m16_k256_n512_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [16, 256], "arg1_shape": [256, 512], "out_shape": [16, 512], "transpose_A": false, "transpose_B": false}, "code": "extern \"C\" __global__ void tuned_dot_nn_op_float_m16_k256_n512_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ C) {\n   float C_local[1];\n  __shared__ float A_shared[1024];\n  __shared__ float B_shared[512];\n   float A_shared_local[4];\n   float B_shared_local[4];\n   float A_shared_local1[4];\n   float B_shared_local1[4];\n  C_local[0] = 0.000000e+00f;\n  ((__shared__ float4*)(A_shared + ((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4))))[0] = (( float4*)(A + ((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 4))))[0];\n  for (int ax0_ax1_fused_inner_inner_inner_s = 0; ax0_ax1_fused_inner_inner_inner_s < 4; ++ax0_ax1_fused_inner_inner_inner_s) {\n    if (((((int)threadIdx.y) * 2) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) >> 3)) < 32) {\n      if ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s) < 256) {\n        if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) < 16) {\n          if (ax0_ax1_fused_inner_inner_inner_s < 2) {\n            B_shared[(((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s)] = B[((((((int)threadIdx.y) * 1024) + ((((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) >> 3) * 512)) + (((int)blockIdx.x) * 8)) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) & 7))];\n          }\n        }\n      }\n    }\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 7; ++k_outer_outer) {\n    __syncthreads();\n    ((__shared__ float4*)(A_shared + (((((k_outer_outer + 1) & 1) * 512) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4))))[0] = (( float4*)(A + ((((((int)threadIdx.y) * 256) + (k_outer_outer * 32)) + (((int)threadIdx.x) * 4)) + 32)))[0];\n    for (int ax0_ax1_fused_inner_inner_inner_s1 = 0; ax0_ax1_fused_inner_inner_inner_s1 < 4; ++ax0_ax1_fused_inner_inner_inner_s1) {\n      if (((((int)threadIdx.y) * 2) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) >> 3)) < 32) {\n        if ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s1) < 256) {\n          if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) < 16) {\n            if (ax0_ax1_fused_inner_inner_inner_s1 < 2) {\n              B_shared[((((((k_outer_outer + 1) & 1) * 256) + (((int)threadIdx.y) * 16)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s1)] = B[((((((k_outer_outer * 16384) + (((int)threadIdx.y) * 1024)) + ((((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) >> 3) * 512)) + (((int)blockIdx.x) * 8)) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) & 7)) + 16384)];\n            }\n          }\n        }\n      }\n    }\n    for (int ax1 = 0; ax1 < 2; ++ax1) {\n      A_shared_local[ax1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax1)];\n    }\n    for (int ax0 = 0; ax0 < 2; ++ax0) {\n      B_shared_local[ax0] = B_shared[((((k_outer_outer & 1) * 256) + (ax0 * 8)) + ((int)threadIdx.x))];\n    }\n    for (int ax11 = 0; ax11 < 2; ++ax11) {\n      A_shared_local[(ax11 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax11) + 2)];\n    }\n    for (int ax01 = 0; ax01 < 2; ++ax01) {\n      B_shared_local[(ax01 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax01 * 8)) + ((int)threadIdx.x)) + 16)];\n    }\n    for (int k_inner_inner = 0; k_inner_inner < 2; ++k_inner_inner) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner] * B_shared_local[k_inner_inner]));\n    }\n    for (int ax12 = 0; ax12 < 2; ++ax12) {\n      A_shared_local[ax12] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax12) + 4)];\n    }\n    for (int ax02 = 0; ax02 < 2; ++ax02) {\n      B_shared_local[ax02] = B_shared[(((((k_outer_outer & 1) * 256) + (ax02 * 8)) + ((int)threadIdx.x)) + 32)];\n    }\n    for (int k_inner_inner1 = 0; k_inner_inner1 < 2; ++k_inner_inner1) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner1 + 2)] * B_shared_local[(k_inner_inner1 + 2)]));\n    }\n    for (int ax13 = 0; ax13 < 2; ++ax13) {\n      A_shared_local[(ax13 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax13) + 6)];\n    }\n    for (int ax03 = 0; ax03 < 2; ++ax03) {\n      B_shared_local[(ax03 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax03 * 8)) + ((int)threadIdx.x)) + 48)];\n    }\n    for (int k_inner_inner2 = 0; k_inner_inner2 < 2; ++k_inner_inner2) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner2] * B_shared_local[k_inner_inner2]));\n    }\n    for (int ax14 = 0; ax14 < 2; ++ax14) {\n      A_shared_local[ax14] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax14) + 8)];\n    }\n    for (int ax04 = 0; ax04 < 2; ++ax04) {\n      B_shared_local[ax04] = B_shared[(((((k_outer_outer & 1) * 256) + (ax04 * 8)) + ((int)threadIdx.x)) + 64)];\n    }\n    for (int k_inner_inner3 = 0; k_inner_inner3 < 2; ++k_inner_inner3) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner3 + 2)] * B_shared_local[(k_inner_inner3 + 2)]));\n    }\n    for (int ax15 = 0; ax15 < 2; ++ax15) {\n      A_shared_local[(ax15 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax15) + 10)];\n    }\n    for (int ax05 = 0; ax05 < 2; ++ax05) {\n      B_shared_local[(ax05 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax05 * 8)) + ((int)threadIdx.x)) + 80)];\n    }\n    for (int k_inner_inner4 = 0; k_inner_inner4 < 2; ++k_inner_inner4) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner4] * B_shared_local[k_inner_inner4]));\n    }\n    for (int ax16 = 0; ax16 < 2; ++ax16) {\n      A_shared_local[ax16] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax16) + 12)];\n    }\n    for (int ax06 = 0; ax06 < 2; ++ax06) {\n      B_shared_local[ax06] = B_shared[(((((k_outer_outer & 1) * 256) + (ax06 * 8)) + ((int)threadIdx.x)) + 96)];\n    }\n    for (int k_inner_inner5 = 0; k_inner_inner5 < 2; ++k_inner_inner5) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner5 + 2)] * B_shared_local[(k_inner_inner5 + 2)]));\n    }\n    for (int ax17 = 0; ax17 < 2; ++ax17) {\n      A_shared_local[(ax17 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax17) + 14)];\n    }\n    for (int ax07 = 0; ax07 < 2; ++ax07) {\n      B_shared_local[(ax07 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax07 * 8)) + ((int)threadIdx.x)) + 112)];\n    }\n    for (int k_inner_inner6 = 0; k_inner_inner6 < 2; ++k_inner_inner6) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner6] * B_shared_local[k_inner_inner6]));\n    }\n    for (int ax18 = 0; ax18 < 2; ++ax18) {\n      A_shared_local[ax18] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax18) + 16)];\n    }\n    for (int ax08 = 0; ax08 < 2; ++ax08) {\n      B_shared_local[ax08] = B_shared[(((((k_outer_outer & 1) * 256) + (ax08 * 8)) + ((int)threadIdx.x)) + 128)];\n    }\n    for (int k_inner_inner7 = 0; k_inner_inner7 < 2; ++k_inner_inner7) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner7 + 2)] * B_shared_local[(k_inner_inner7 + 2)]));\n    }\n    for (int ax19 = 0; ax19 < 2; ++ax19) {\n      A_shared_local[(ax19 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax19) + 18)];\n    }\n    for (int ax09 = 0; ax09 < 2; ++ax09) {\n      B_shared_local[(ax09 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax09 * 8)) + ((int)threadIdx.x)) + 144)];\n    }\n    for (int k_inner_inner8 = 0; k_inner_inner8 < 2; ++k_inner_inner8) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner8] * B_shared_local[k_inner_inner8]));\n    }\n    for (int ax110 = 0; ax110 < 2; ++ax110) {\n      A_shared_local[ax110] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax110) + 20)];\n    }\n    for (int ax010 = 0; ax010 < 2; ++ax010) {\n      B_shared_local[ax010] = B_shared[(((((k_outer_outer & 1) * 256) + (ax010 * 8)) + ((int)threadIdx.x)) + 160)];\n    }\n    for (int k_inner_inner9 = 0; k_inner_inner9 < 2; ++k_inner_inner9) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner9 + 2)] * B_shared_local[(k_inner_inner9 + 2)]));\n    }\n    for (int ax111 = 0; ax111 < 2; ++ax111) {\n      A_shared_local[(ax111 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax111) + 22)];\n    }\n    for (int ax011 = 0; ax011 < 2; ++ax011) {\n      B_shared_local[(ax011 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax011 * 8)) + ((int)threadIdx.x)) + 176)];\n    }\n    for (int k_inner_inner10 = 0; k_inner_inner10 < 2; ++k_inner_inner10) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner10] * B_shared_local[k_inner_inner10]));\n    }\n    for (int ax112 = 0; ax112 < 2; ++ax112) {\n      A_shared_local[ax112] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax112) + 24)];\n    }\n    for (int ax012 = 0; ax012 < 2; ++ax012) {\n      B_shared_local[ax012] = B_shared[(((((k_outer_outer & 1) * 256) + (ax012 * 8)) + ((int)threadIdx.x)) + 192)];\n    }\n    for (int k_inner_inner11 = 0; k_inner_inner11 < 2; ++k_inner_inner11) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner11 + 2)] * B_shared_local[(k_inner_inner11 + 2)]));\n    }\n    for (int ax113 = 0; ax113 < 2; ++ax113) {\n      A_shared_local[(ax113 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax113) + 26)];\n    }\n    for (int ax013 = 0; ax013 < 2; ++ax013) {\n      B_shared_local[(ax013 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax013 * 8)) + ((int)threadIdx.x)) + 208)];\n    }\n    for (int k_inner_inner12 = 0; k_inner_inner12 < 2; ++k_inner_inner12) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner12] * B_shared_local[k_inner_inner12]));\n    }\n    for (int ax114 = 0; ax114 < 2; ++ax114) {\n      A_shared_local[ax114] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax114) + 28)];\n    }\n    for (int ax014 = 0; ax014 < 2; ++ax014) {\n      B_shared_local[ax014] = B_shared[(((((k_outer_outer & 1) * 256) + (ax014 * 8)) + ((int)threadIdx.x)) + 224)];\n    }\n    for (int k_inner_inner13 = 0; k_inner_inner13 < 2; ++k_inner_inner13) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner13 + 2)] * B_shared_local[(k_inner_inner13 + 2)]));\n    }\n    for (int ax115 = 0; ax115 < 2; ++ax115) {\n      A_shared_local[(ax115 + 2)] = A_shared[(((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + ax115) + 30)];\n    }\n    for (int ax015 = 0; ax015 < 2; ++ax015) {\n      B_shared_local[(ax015 + 2)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax015 * 8)) + ((int)threadIdx.x)) + 240)];\n    }\n    for (int k_inner_inner14 = 0; k_inner_inner14 < 2; ++k_inner_inner14) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner14] * B_shared_local[k_inner_inner14]));\n    }\n    for (int k_inner_inner15 = 0; k_inner_inner15 < 2; ++k_inner_inner15) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner15 + 2)] * B_shared_local[(k_inner_inner15 + 2)]));\n    }\n  }\n  __syncthreads();\n  for (int ax116 = 0; ax116 < 2; ++ax116) {\n    A_shared_local1[ax116] = A_shared[(((((int)threadIdx.y) * 32) + ax116) + 512)];\n  }\n  for (int ax016 = 0; ax016 < 2; ++ax016) {\n    B_shared_local1[ax016] = B_shared[(((ax016 * 8) + ((int)threadIdx.x)) + 256)];\n  }\n  for (int ax117 = 0; ax117 < 2; ++ax117) {\n    A_shared_local1[(ax117 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax117) + 514)];\n  }\n  for (int ax017 = 0; ax017 < 2; ++ax017) {\n    B_shared_local1[(ax017 + 2)] = B_shared[(((ax017 * 8) + ((int)threadIdx.x)) + 272)];\n  }\n  for (int k_inner_inner16 = 0; k_inner_inner16 < 2; ++k_inner_inner16) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner16] * B_shared_local1[k_inner_inner16]));\n  }\n  for (int ax118 = 0; ax118 < 2; ++ax118) {\n    A_shared_local1[ax118] = A_shared[(((((int)threadIdx.y) * 32) + ax118) + 516)];\n  }\n  for (int ax018 = 0; ax018 < 2; ++ax018) {\n    B_shared_local1[ax018] = B_shared[(((ax018 * 8) + ((int)threadIdx.x)) + 288)];\n  }\n  for (int k_inner_inner17 = 0; k_inner_inner17 < 2; ++k_inner_inner17) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner17 + 2)] * B_shared_local1[(k_inner_inner17 + 2)]));\n  }\n  for (int ax119 = 0; ax119 < 2; ++ax119) {\n    A_shared_local1[(ax119 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax119) + 518)];\n  }\n  for (int ax019 = 0; ax019 < 2; ++ax019) {\n    B_shared_local1[(ax019 + 2)] = B_shared[(((ax019 * 8) + ((int)threadIdx.x)) + 304)];\n  }\n  for (int k_inner_inner18 = 0; k_inner_inner18 < 2; ++k_inner_inner18) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner18] * B_shared_local1[k_inner_inner18]));\n  }\n  for (int ax120 = 0; ax120 < 2; ++ax120) {\n    A_shared_local1[ax120] = A_shared[(((((int)threadIdx.y) * 32) + ax120) + 520)];\n  }\n  for (int ax020 = 0; ax020 < 2; ++ax020) {\n    B_shared_local1[ax020] = B_shared[(((ax020 * 8) + ((int)threadIdx.x)) + 320)];\n  }\n  for (int k_inner_inner19 = 0; k_inner_inner19 < 2; ++k_inner_inner19) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner19 + 2)] * B_shared_local1[(k_inner_inner19 + 2)]));\n  }\n  for (int ax121 = 0; ax121 < 2; ++ax121) {\n    A_shared_local1[(ax121 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax121) + 522)];\n  }\n  for (int ax021 = 0; ax021 < 2; ++ax021) {\n    B_shared_local1[(ax021 + 2)] = B_shared[(((ax021 * 8) + ((int)threadIdx.x)) + 336)];\n  }\n  for (int k_inner_inner20 = 0; k_inner_inner20 < 2; ++k_inner_inner20) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner20] * B_shared_local1[k_inner_inner20]));\n  }\n  for (int ax122 = 0; ax122 < 2; ++ax122) {\n    A_shared_local1[ax122] = A_shared[(((((int)threadIdx.y) * 32) + ax122) + 524)];\n  }\n  for (int ax022 = 0; ax022 < 2; ++ax022) {\n    B_shared_local1[ax022] = B_shared[(((ax022 * 8) + ((int)threadIdx.x)) + 352)];\n  }\n  for (int k_inner_inner21 = 0; k_inner_inner21 < 2; ++k_inner_inner21) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner21 + 2)] * B_shared_local1[(k_inner_inner21 + 2)]));\n  }\n  for (int ax123 = 0; ax123 < 2; ++ax123) {\n    A_shared_local1[(ax123 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax123) + 526)];\n  }\n  for (int ax023 = 0; ax023 < 2; ++ax023) {\n    B_shared_local1[(ax023 + 2)] = B_shared[(((ax023 * 8) + ((int)threadIdx.x)) + 368)];\n  }\n  for (int k_inner_inner22 = 0; k_inner_inner22 < 2; ++k_inner_inner22) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner22] * B_shared_local1[k_inner_inner22]));\n  }\n  for (int ax124 = 0; ax124 < 2; ++ax124) {\n    A_shared_local1[ax124] = A_shared[(((((int)threadIdx.y) * 32) + ax124) + 528)];\n  }\n  for (int ax024 = 0; ax024 < 2; ++ax024) {\n    B_shared_local1[ax024] = B_shared[(((ax024 * 8) + ((int)threadIdx.x)) + 384)];\n  }\n  for (int k_inner_inner23 = 0; k_inner_inner23 < 2; ++k_inner_inner23) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner23 + 2)] * B_shared_local1[(k_inner_inner23 + 2)]));\n  }\n  for (int ax125 = 0; ax125 < 2; ++ax125) {\n    A_shared_local1[(ax125 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax125) + 530)];\n  }\n  for (int ax025 = 0; ax025 < 2; ++ax025) {\n    B_shared_local1[(ax025 + 2)] = B_shared[(((ax025 * 8) + ((int)threadIdx.x)) + 400)];\n  }\n  for (int k_inner_inner24 = 0; k_inner_inner24 < 2; ++k_inner_inner24) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner24] * B_shared_local1[k_inner_inner24]));\n  }\n  for (int ax126 = 0; ax126 < 2; ++ax126) {\n    A_shared_local1[ax126] = A_shared[(((((int)threadIdx.y) * 32) + ax126) + 532)];\n  }\n  for (int ax026 = 0; ax026 < 2; ++ax026) {\n    B_shared_local1[ax026] = B_shared[(((ax026 * 8) + ((int)threadIdx.x)) + 416)];\n  }\n  for (int k_inner_inner25 = 0; k_inner_inner25 < 2; ++k_inner_inner25) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner25 + 2)] * B_shared_local1[(k_inner_inner25 + 2)]));\n  }\n  for (int ax127 = 0; ax127 < 2; ++ax127) {\n    A_shared_local1[(ax127 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax127) + 534)];\n  }\n  for (int ax027 = 0; ax027 < 2; ++ax027) {\n    B_shared_local1[(ax027 + 2)] = B_shared[(((ax027 * 8) + ((int)threadIdx.x)) + 432)];\n  }\n  for (int k_inner_inner26 = 0; k_inner_inner26 < 2; ++k_inner_inner26) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner26] * B_shared_local1[k_inner_inner26]));\n  }\n  for (int ax128 = 0; ax128 < 2; ++ax128) {\n    A_shared_local1[ax128] = A_shared[(((((int)threadIdx.y) * 32) + ax128) + 536)];\n  }\n  for (int ax028 = 0; ax028 < 2; ++ax028) {\n    B_shared_local1[ax028] = B_shared[(((ax028 * 8) + ((int)threadIdx.x)) + 448)];\n  }\n  for (int k_inner_inner27 = 0; k_inner_inner27 < 2; ++k_inner_inner27) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner27 + 2)] * B_shared_local1[(k_inner_inner27 + 2)]));\n  }\n  for (int ax129 = 0; ax129 < 2; ++ax129) {\n    A_shared_local1[(ax129 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax129) + 538)];\n  }\n  for (int ax029 = 0; ax029 < 2; ++ax029) {\n    B_shared_local1[(ax029 + 2)] = B_shared[(((ax029 * 8) + ((int)threadIdx.x)) + 464)];\n  }\n  for (int k_inner_inner28 = 0; k_inner_inner28 < 2; ++k_inner_inner28) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner28] * B_shared_local1[k_inner_inner28]));\n  }\n  for (int ax130 = 0; ax130 < 2; ++ax130) {\n    A_shared_local1[ax130] = A_shared[(((((int)threadIdx.y) * 32) + ax130) + 540)];\n  }\n  for (int ax030 = 0; ax030 < 2; ++ax030) {\n    B_shared_local1[ax030] = B_shared[(((ax030 * 8) + ((int)threadIdx.x)) + 480)];\n  }\n  for (int k_inner_inner29 = 0; k_inner_inner29 < 2; ++k_inner_inner29) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner29 + 2)] * B_shared_local1[(k_inner_inner29 + 2)]));\n  }\n  for (int ax131 = 0; ax131 < 2; ++ax131) {\n    A_shared_local1[(ax131 + 2)] = A_shared[(((((int)threadIdx.y) * 32) + ax131) + 542)];\n  }\n  for (int ax031 = 0; ax031 < 2; ++ax031) {\n    B_shared_local1[(ax031 + 2)] = B_shared[(((ax031 * 8) + ((int)threadIdx.x)) + 496)];\n  }\n  for (int k_inner_inner30 = 0; k_inner_inner30 < 2; ++k_inner_inner30) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner30] * B_shared_local1[k_inner_inner30]));\n  }\n  for (int k_inner_inner31 = 0; k_inner_inner31 < 2; ++k_inner_inner31) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner31 + 2)] * B_shared_local1[(k_inner_inner31 + 2)]));\n  }\n  C[(((((int)threadIdx.y) * 512) + (((int)blockIdx.x) * 8)) + ((int)threadIdx.x))] = C_local[0];\n}\n\n", "gridDim": [64, 1, 1], "blockDim": [8, 16, 1]}, {"tvm_func_name": "tuned_dot_nn_op_float_m16_k512_n1024_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [16, 512], "arg1_shape": [512, 1024], "out_shape": [16, 1024], "transpose_A": false, "transpose_B": false}, "code": "extern \"C\" __global__ void tuned_dot_nn_op_float_m16_k512_n1024_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ C) {\n   float C_local[1];\n  __shared__ float A_shared[1024];\n  __shared__ float B_shared[1024];\n   float A_shared_local[2];\n   float B_shared_local[2];\n   float A_shared_local1[2];\n   float B_shared_local1[2];\n  C_local[0] = 0.000000e+00f;\n  for (int ax0_ax1_fused_inner_inner_inner_s = 0; ax0_ax1_fused_inner_inner_inner_s < 4; ++ax0_ax1_fused_inner_inner_inner_s) {\n    if (((((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) >> 5) + ((int)threadIdx.y)) < 16) {\n      if ((((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s) < 512) {\n        if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) < 32) {\n          if (ax0_ax1_fused_inner_inner_inner_s < 2) {\n            A_shared[(((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s)] = A[(((((int)threadIdx.y) * 512) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s)];\n          }\n        }\n      }\n    }\n  }\n  for (int ax0_ax1_fused_inner_inner_inner_s1 = 0; ax0_ax1_fused_inner_inner_inner_s1 < 4; ++ax0_ax1_fused_inner_inner_inner_s1) {\n    if (((((int)threadIdx.y) * 2) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) >> 4)) < 32) {\n      if ((((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s1) < 512) {\n        if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) < 32) {\n          if (ax0_ax1_fused_inner_inner_inner_s1 < 2) {\n            B_shared[(((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s1)] = B[((((((int)threadIdx.y) * 2048) + ((((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) >> 4) * 1024)) + (((int)blockIdx.x) * 16)) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) & 15))];\n          }\n        }\n      }\n    }\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 15; ++k_outer_outer) {\n    __syncthreads();\n    for (int ax0_ax1_fused_inner_inner_inner_s2 = 0; ax0_ax1_fused_inner_inner_inner_s2 < 4; ++ax0_ax1_fused_inner_inner_inner_s2) {\n      if (((((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s2) >> 5) + ((int)threadIdx.y)) < 16) {\n        if ((((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s2) < 512) {\n          if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s2) < 32) {\n            if (ax0_ax1_fused_inner_inner_inner_s2 < 2) {\n              A_shared[((((((k_outer_outer + 1) & 1) * 512) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s2)] = A[(((((((int)threadIdx.y) * 512) + (k_outer_outer * 32)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s2) + 32)];\n            }\n          }\n        }\n      }\n    }\n    for (int ax0_ax1_fused_inner_inner_inner_s3 = 0; ax0_ax1_fused_inner_inner_inner_s3 < 4; ++ax0_ax1_fused_inner_inner_inner_s3) {\n      if (((((int)threadIdx.y) * 2) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s3) >> 4)) < 32) {\n        if ((((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s3) < 512) {\n          if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s3) < 32) {\n            if (ax0_ax1_fused_inner_inner_inner_s3 < 2) {\n              B_shared[((((((k_outer_outer + 1) & 1) * 512) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s3)] = B[((((((k_outer_outer * 32768) + (((int)threadIdx.y) * 2048)) + ((((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s3) >> 4) * 1024)) + (((int)blockIdx.x) * 16)) + (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s3) & 15)) + 32768)];\n            }\n          }\n        }\n      }\n    }\n    A_shared_local[0] = A_shared[(((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32))];\n    B_shared_local[0] = B_shared[(((k_outer_outer & 1) * 512) + ((int)threadIdx.x))];\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 1)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 16)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 2)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 32)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 3)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 48)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 4)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 64)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 5)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 80)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 6)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 96)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 7)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 112)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 8)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 128)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 9)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 144)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 10)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 160)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 11)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 176)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 12)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 192)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 13)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 208)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 14)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 224)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 15)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 240)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 16)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 256)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 17)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 272)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 18)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 288)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 19)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 304)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 20)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 320)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 21)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 336)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 22)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 352)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 23)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 368)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 24)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 384)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 25)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 400)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 26)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 416)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 27)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 432)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 28)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 448)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 29)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 464)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 30)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 480)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 512) + (((int)threadIdx.y) * 32)) + 31)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 512) + ((int)threadIdx.x)) + 496)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n  }\n  __syncthreads();\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 512)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 512)];\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 513)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 528)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 514)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 544)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 515)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 560)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 516)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 576)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 517)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 592)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 518)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 608)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 519)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 624)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 520)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 640)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 521)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 656)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 522)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 672)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 523)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 688)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 524)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 704)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 525)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 720)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 526)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 736)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 527)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 752)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 528)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 768)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 529)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 784)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 530)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 800)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 531)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 816)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 532)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 832)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 533)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 848)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 534)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 864)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 535)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 880)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 536)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 896)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 537)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 912)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 538)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 928)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 539)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 944)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 540)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 960)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 541)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 976)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 32) + 542)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 992)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 32) + 543)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 1008)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  C[(((((int)threadIdx.y) * 1024) + (((int)blockIdx.x) * 16)) + ((int)threadIdx.x))] = C_local[0];\n}\n\n", "gridDim": [64, 1, 1], "blockDim": [16, 16, 1]}, {"tvm_func_name": "tuned_dot_nn_op_float_m16_k3008_n1024_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [16, 3008], "arg1_shape": [3008, 1024], "out_shape": [16, 1024], "transpose_A": false, "transpose_B": false}, "code": "extern \"C\" __global__ void tuned_dot_nn_op_float_m16_k3008_n1024_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ C) {\n   float C_local[1];\n  __shared__ float A_shared[1504];\n  __shared__ float B_shared[752];\n   float A_shared_local[2];\n   float B_shared_local[2];\n   float A_shared_local1[2];\n   float B_shared_local1[2];\n  C_local[0] = 0.000000e+00f;\n  for (int ax0_ax1_fused_inner_inner_outer = 0; ax0_ax1_fused_inner_inner_outer < 2; ++ax0_ax1_fused_inner_inner_outer) {\n    for (int ax0_ax1_fused_inner_inner_inner_s = 0; ax0_ax1_fused_inner_inner_inner_s < 4; ++ax0_ax1_fused_inner_inner_inner_s) {\n      if ((((((((int)threadIdx.x) * 6) + (ax0_ax1_fused_inner_inner_outer * 4)) + ax0_ax1_fused_inner_inner_inner_s) / 47) + ((int)threadIdx.y)) < 16) {\n        if (((((((int)threadIdx.y) * 47) + (((int)threadIdx.x) * 6)) + (ax0_ax1_fused_inner_inner_outer * 4)) + ax0_ax1_fused_inner_inner_inner_s) < 752) {\n          if ((((((int)threadIdx.x) * 6) + (ax0_ax1_fused_inner_inner_outer * 4)) + ax0_ax1_fused_inner_inner_inner_s) < 47) {\n            if (((ax0_ax1_fused_inner_inner_outer * 4) + ax0_ax1_fused_inner_inner_inner_s) < 6) {\n              A_shared[((((((int)threadIdx.y) * 47) + (((int)threadIdx.x) * 6)) + (ax0_ax1_fused_inner_inner_outer * 4)) + ax0_ax1_fused_inner_inner_inner_s)] = A[((((((int)threadIdx.y) * 3008) + (((int)threadIdx.x) * 6)) + (ax0_ax1_fused_inner_inner_outer * 4)) + ax0_ax1_fused_inner_inner_inner_s)];\n            }\n          }\n        }\n      }\n    }\n  }\n  for (int ax0_ax1_fused_inner_inner_inner_s1 = 0; ax0_ax1_fused_inner_inner_inner_s1 < 4; ++ax0_ax1_fused_inner_inner_inner_s1) {\n    if (((((int)threadIdx.y) * 3) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_inner_inner_inner_s1) >> 3)) < 47) {\n      if ((((((int)threadIdx.y) * 24) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_inner_inner_inner_s1) < 376) {\n        if (((((int)threadIdx.x) * 3) + ax0_ax1_fused_inner_inner_inner_s1) < 24) {\n          if (ax0_ax1_fused_inner_inner_inner_s1 < 3) {\n            B_shared[(((((int)threadIdx.y) * 24) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_inner_inner_inner_s1)] = B[((((((int)threadIdx.y) * 3072) + ((((((int)threadIdx.x) * 3) + ax0_ax1_fused_inner_inner_inner_s1) >> 3) * 1024)) + (((int)blockIdx.x) * 8)) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_inner_inner_inner_s1) & 7))];\n          }\n        }\n      }\n    }\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 63; ++k_outer_outer) {\n    __syncthreads();\n    for (int ax0_ax1_fused_inner_inner_outer1 = 0; ax0_ax1_fused_inner_inner_outer1 < 2; ++ax0_ax1_fused_inner_inner_outer1) {\n      for (int ax0_ax1_fused_inner_inner_inner_s2 = 0; ax0_ax1_fused_inner_inner_inner_s2 < 4; ++ax0_ax1_fused_inner_inner_inner_s2) {\n        if ((((((((int)threadIdx.x) * 6) + (ax0_ax1_fused_inner_inner_outer1 * 4)) + ax0_ax1_fused_inner_inner_inner_s2) / 47) + ((int)threadIdx.y)) < 16) {\n          if (((((((int)threadIdx.y) * 47) + (((int)threadIdx.x) * 6)) + (ax0_ax1_fused_inner_inner_outer1 * 4)) + ax0_ax1_fused_inner_inner_inner_s2) < 752) {\n            if ((((((int)threadIdx.x) * 6) + (ax0_ax1_fused_inner_inner_outer1 * 4)) + ax0_ax1_fused_inner_inner_inner_s2) < 47) {\n              if (((ax0_ax1_fused_inner_inner_outer1 * 4) + ax0_ax1_fused_inner_inner_inner_s2) < 6) {\n                A_shared[(((((((k_outer_outer + 1) & 1) * 752) + (((int)threadIdx.y) * 47)) + (((int)threadIdx.x) * 6)) + (ax0_ax1_fused_inner_inner_outer1 * 4)) + ax0_ax1_fused_inner_inner_inner_s2)] = A[((((((((int)threadIdx.y) * 3008) + (k_outer_outer * 47)) + (((int)threadIdx.x) * 6)) + (ax0_ax1_fused_inner_inner_outer1 * 4)) + ax0_ax1_fused_inner_inner_inner_s2) + 47)];\n              }\n            }\n          }\n        }\n      }\n    }\n    for (int ax0_ax1_fused_inner_inner_inner_s3 = 0; ax0_ax1_fused_inner_inner_inner_s3 < 4; ++ax0_ax1_fused_inner_inner_inner_s3) {\n      if (((((int)threadIdx.y) * 3) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_inner_inner_inner_s3) >> 3)) < 47) {\n        if ((((((int)threadIdx.y) * 24) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_inner_inner_inner_s3) < 376) {\n          if (((((int)threadIdx.x) * 3) + ax0_ax1_fused_inner_inner_inner_s3) < 24) {\n            if (ax0_ax1_fused_inner_inner_inner_s3 < 3) {\n              if ((((k_outer_outer * 47) + (((int)threadIdx.y) * 3)) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_inner_inner_inner_s3) >> 3)) < 2961) {\n                B_shared[((((((k_outer_outer + 1) & 1) * 376) + (((int)threadIdx.y) * 24)) + (((int)threadIdx.x) * 3)) + ax0_ax1_fused_inner_inner_inner_s3)] = B[((((((k_outer_outer * 48128) + (((int)threadIdx.y) * 3072)) + ((((((int)threadIdx.x) * 3) + ax0_ax1_fused_inner_inner_inner_s3) >> 3) * 1024)) + (((int)blockIdx.x) * 8)) + (((((int)threadIdx.x) * 3) + ax0_ax1_fused_inner_inner_inner_s3) & 7)) + 48128)];\n              }\n            }\n          }\n        }\n      }\n    }\n    A_shared_local[0] = A_shared[(((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47))];\n    B_shared_local[0] = B_shared[(((k_outer_outer & 1) * 376) + ((int)threadIdx.x))];\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 1)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 8)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 2)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 16)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 3)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 24)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 4)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 32)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 5)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 40)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 6)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 48)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 7)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 56)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 8)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 64)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 9)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 72)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 10)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 80)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 11)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 88)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 12)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 96)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 13)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 104)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 14)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 112)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 15)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 120)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 16)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 128)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 17)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 136)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 18)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 144)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 19)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 152)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 20)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 160)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 21)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 168)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 22)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 176)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 23)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 184)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 24)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 192)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 25)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 200)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 26)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 208)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 27)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 216)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 28)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 224)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 29)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 232)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 30)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 240)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 31)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 248)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 32)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 256)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 33)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 264)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 34)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 272)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 35)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 280)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 36)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 288)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 37)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 296)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 38)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 304)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 39)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 312)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 40)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 320)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 41)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 328)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 42)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 336)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 43)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 344)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 44)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 352)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 45)];\n    B_shared_local[1] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 360)];\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 752) + (((int)threadIdx.y) * 47)) + 46)];\n    B_shared_local[0] = B_shared[((((k_outer_outer & 1) * 376) + ((int)threadIdx.x)) + 368)];\n    C_local[0] = (C_local[0] + (A_shared_local[1] * B_shared_local[1]));\n    C_local[0] = (C_local[0] + (A_shared_local[0] * B_shared_local[0]));\n  }\n  __syncthreads();\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 752)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 376)];\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 753)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 384)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 754)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 392)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 755)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 400)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 756)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 408)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 757)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 416)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 758)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 424)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 759)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 432)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 760)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 440)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 761)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 448)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 762)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 456)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 763)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 464)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 764)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 472)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 765)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 480)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 766)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 488)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 767)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 496)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 768)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 504)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 769)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 512)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 770)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 520)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 771)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 528)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 772)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 536)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 773)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 544)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 774)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 552)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 775)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 560)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 776)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 568)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 777)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 576)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 778)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 584)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 779)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 592)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 780)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 600)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 781)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 608)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 782)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 616)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 783)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 624)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 784)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 632)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 785)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 640)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 786)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 648)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 787)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 656)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 788)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 664)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 789)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 672)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 790)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 680)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 791)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 688)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 792)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 696)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 793)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 704)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 794)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 712)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 795)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 720)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 796)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 728)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 47) + 797)];\n  B_shared_local1[1] = B_shared[(((int)threadIdx.x) + 736)];\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 47) + 798)];\n  B_shared_local1[0] = B_shared[(((int)threadIdx.x) + 744)];\n  C_local[0] = (C_local[0] + (A_shared_local1[1] * B_shared_local1[1]));\n  C_local[0] = (C_local[0] + (A_shared_local1[0] * B_shared_local1[0]));\n  C[(((((int)threadIdx.y) * 1024) + (((int)blockIdx.x) * 8)) + ((int)threadIdx.x))] = C_local[0];\n}\n\n", "gridDim": [128, 1, 1], "blockDim": [8, 16, 1]}]