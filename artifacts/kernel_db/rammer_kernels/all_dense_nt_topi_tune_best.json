[{"tvm_func_name": "tuned_dot_nt_op_float_m1_k256_n256_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [1, 256], "arg1_shape": [256, 256], "out_shape": [1, 256], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m1_k256_n256_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[16];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 16; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[((k_outer * 16) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 256) + (k_outer * 16)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 8) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((int)blockIdx.x)] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [256, 1, 1], "blockDim": [16, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m1_k256_n512_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [1, 256], "arg1_shape": [256, 512], "out_shape": [1, 512], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m1_k256_n512_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[16];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 16; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[((k_outer * 16) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 256) + (k_outer * 16)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 8) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((int)blockIdx.x)] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [512, 1, 1], "blockDim": [16, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m1_k512_n1024_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [1, 512], "arg1_shape": [512, 1024], "out_shape": [1, 1024], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m1_k512_n1024_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[64];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 8; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[((k_outer * 64) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 512) + (k_outer * 64)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((int)blockIdx.x)] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [1024, 1, 1], "blockDim": [64, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m1_k3008_n1024_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [1, 3008], "arg1_shape": [3008, 1024], "out_shape": [1, 1024], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m1_k3008_n1024_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[47];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 64; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[((k_outer * 47) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 3008) + (k_outer * 47)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 15) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((int)blockIdx.x)] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [1024, 1, 1], "blockDim": [47, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m4_k256_n256_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [4, 256], "arg1_shape": [256, 256], "out_shape": [4, 256], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m4_k256_n256_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[16];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 16; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[(((((int)blockIdx.y) * 256) + (k_outer * 16)) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 256) + (k_outer * 16)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 8) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((((int)blockIdx.y) * 256) + ((int)blockIdx.x))] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [256, 4, 1], "blockDim": [16, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m4_k256_n512_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [4, 256], "arg1_shape": [256, 512], "out_shape": [4, 512], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m4_k256_n512_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[16];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 16; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[(((((int)blockIdx.y) * 256) + (k_outer * 16)) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 256) + (k_outer * 16)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 8) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((((int)blockIdx.y) * 512) + ((int)blockIdx.x))] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [512, 4, 1], "blockDim": [16, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m4_k512_n1024_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [4, 512], "arg1_shape": [512, 1024], "out_shape": [4, 1024], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m4_k512_n1024_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[32];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 16; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[(((((int)blockIdx.y) * 512) + (k_outer * 32)) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 512) + (k_outer * 32)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((((int)blockIdx.y) * 1024) + ((int)blockIdx.x))] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [1024, 4, 1], "blockDim": [32, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m4_k3008_n1024_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [4, 3008], "arg1_shape": [3008, 1024], "out_shape": [4, 1024], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m4_k3008_n1024_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[64];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 47; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[(((((int)blockIdx.y) * 3008) + (k_outer * 64)) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 3008) + (k_outer * 64)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((((int)blockIdx.y) * 1024) + ((int)blockIdx.x))] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [1024, 4, 1], "blockDim": [64, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m16_k256_n256_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [16, 256], "arg1_shape": [256, 256], "out_shape": [16, 256], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m16_k256_n256_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[16];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 16; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[(((((int)blockIdx.y) * 256) + (k_outer * 16)) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 256) + (k_outer * 16)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 8) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((((int)blockIdx.y) * 256) + ((int)blockIdx.x))] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [256, 16, 1], "blockDim": [16, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m16_k256_n512_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [16, 256], "arg1_shape": [256, 512], "out_shape": [16, 512], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m16_k256_n512_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[16];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 16; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[(((((int)blockIdx.y) * 256) + (k_outer * 16)) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 256) + (k_outer * 16)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 8) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((((int)blockIdx.y) * 512) + ((int)blockIdx.x))] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [512, 16, 1], "blockDim": [16, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m16_k512_n1024_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [16, 512], "arg1_shape": [512, 1024], "out_shape": [16, 1024], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m16_k512_n1024_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[16];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 32; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[(((((int)blockIdx.y) * 512) + (k_outer * 16)) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 512) + (k_outer * 16)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 8) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((((int)blockIdx.y) * 1024) + ((int)blockIdx.x))] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [1024, 16, 1], "blockDim": [16, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m16_k3008_n1024_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [16, 3008], "arg1_shape": [3008, 1024], "out_shape": [16, 1024], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m16_k3008_n1024_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[2];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 1504; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[(((((int)blockIdx.y) * 3008) + (k_outer * 2)) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 3008) + (k_outer * 2)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 1) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((((int)blockIdx.y) * 1024) + ((int)blockIdx.x))] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [1024, 16, 1], "blockDim": [2, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m1_k4096_n4096_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [1, 4096], "arg1_shape": [4096, 4096], "out_shape": [1, 4096], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m1_k4096_n4096_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[128];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 32; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[((k_outer * 128) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 4096) + (k_outer * 128)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 64)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((int)blockIdx.x)] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [4096, 1, 1], "blockDim": [128, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m1_k768_n10_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [1, 768], "arg1_shape": [768, 10], "out_shape": [1, 10], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m1_k768_n10_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[96];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 8; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[((k_outer * 96) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 768) + (k_outer * 96)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 64)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((int)blockIdx.x)] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [10, 1, 1], "blockDim": [96, 1, 1]}, {"tvm_func_name": "tuned_dot_nt_op_float_m1_k9216_n4096_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [1, 9216], "arg1_shape": [9216, 4096], "out_shape": [1, 4096], "transpose_A": false, "transpose_B": true}, "code": "extern \"C\" __global__ void tuned_dot_nt_op_float_m1_k9216_n4096_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ T_dense) {\n   float T_dense_rf[1];\n  __shared__ float red_buf0[512];\n  T_dense_rf[0] = 0.000000e+00f;\n  for (int k_outer = 0; k_outer < 18; ++k_outer) {\n    T_dense_rf[0] = (T_dense_rf[0] + (A[((k_outer * 512) + ((int)threadIdx.x))] * B[(((((int)blockIdx.x) * 9216) + (k_outer * 512)) + ((int)threadIdx.x))]));\n  }\n  __syncthreads();\n  ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = T_dense_rf[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 256) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 256)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 128) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 128)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 64)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] = (((volatile __shared__ float*)red_buf0)[((int)threadIdx.x)] + ((volatile __shared__ float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) == 0) {\n    T_dense[((int)blockIdx.x)] = ((volatile __shared__ float*)red_buf0)[0];\n  }\n}\n\n", "gridDim": [4096, 1, 1], "blockDim": [512, 1, 1]}]